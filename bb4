-- AutoMinigames ‚Äì Smart ETA + TP + FULL AutoPlay (v7_3, patch B ‚Äì Fsys robust)
-- LocalScript para StarterPlayerScripts (cliente).

------------------------------ Servicios ------------------------------
local Players     = game:GetService("Players")
local RS          = game:GetService("ReplicatedStorage")
local RunService  = game:GetService("RunService")

if not RunService:IsClient() then
    warn("[AutoMG] ‚ùå Debe ejecutarse como LocalScript (cliente).")
    return
end

local LP = Players.LocalPlayer
if not LP then return end

------------------------------ Utilidades base ------------------------------
-- pcall seguro (con fallback por si alg√∫n entorno lo hubiese tocado)
local SAFE_PCALL do
    local _pcall = rawget(_G, "pcall")
    if type(_pcall) == "function" then
        SAFE_PCALL = function(fn, ...) return _pcall(fn, ...) end
    else
        SAFE_PCALL = function(fn, ...) return true, fn(...) end
    end
end

-- Helpers de tipo
local function isFn(x) return type(x) == "function" end
local function isMS(x) return typeof(x) == "Instance" and x:IsA("ModuleScript") end

-- Logger con timestamp UTC, a prueba de fallos
local function _utc_stamp()
    local ok, s = SAFE_PCALL(function()
        local dt = DateTime.now():ToUniversalTime()
        return string.format("%02d:%02d:%02d", dt.Hour, dt.Minute, dt.Second)
    end)
    return ok and s or "00:00:00"
end
local function LOG(tag, ...) print(string.format("%s %s", tag, _utc_stamp()), ...) end
local function logI(...) LOG("üü¢ [AutoMG]", ...) end
local function logW(...) LOG("‚ö†Ô∏è  [AutoMG]", ...) end
local function logE(...) LOG("üõë [AutoMG]", ...) end
local function logS(...) LOG("‚úÖ [AutoMG]", ...) end

-- require protegido
local function srequire(ms)
    if not isMS(ms) then return nil end
    local ok, mod = SAFE_PCALL(function() return require(ms) end)
    return ok and mod or nil
end

------------------------------ Fsys: autodetecci√≥n y adaptaci√≥n ------------------------------
-- Devuelve un loader: function(name) -> m√≥dulo o nil
local function _adapt_as_loader(obj)
    -- Intenta convertir cualquier retorno de require(Fsys) en una funci√≥n loader(name)
    local function asLoader(x)
        if type(x) == "function" then
            -- 1) ¬øacepta (name)?
            local ok1 = SAFE_PCALL(function() return x("__ping__") end)  -- no nos importa el valor
            if ok1 then return function(name) return x(name) end, "fn(name)" end

            -- 2) ¬øes f√°brica que acepta (RS)?
            local ok2, y2 = SAFE_PCALL(function() return x(RS) end)
            if ok2 and y2 ~= nil then
                local l2, d2 = asLoader(y2)
                if l2 then return l2, "fn(RS) ‚Üí "..d2 end
            end

            -- 3) ¬øes f√°brica que acepta ()?
            local ok3, y3 = SAFE_PCALL(function() return x() end)
            if ok3 and y3 ~= nil then
                local l3, d3 = asLoader(y3)
                if l3 then return l3, "fn() ‚Üí "..d3 end
            end
        elseif type(x) == "table" then
            -- 4) M√©todos t√≠picos: :load / :require / :import / :get
            local keys = {"load","Load","require","Require","import","Import","get","Get"}
            for _,k in ipairs(keys) do
                local f = rawget(x, k)
                if type(f) == "function" then
                    -- Soporta tanto x.load(name) como x:load(name)
                    return function(name)
                        if debug and debug.info and debug.info(f, "a") == 1 then
                            return f(x, name) -- m√©todo con self
                        else
                            return f(name)     -- funci√≥n libre en la tabla
                        end
                    end, "tbl:"..k
                end
            end
            -- 5) Inicializadores: :init/:Init/:setup ‚Üí devuelven loader u objeto con loader
            local ikeys = {"init","Init","bootstrap","Bootstrap","setup","Setup"}
            for _,k in ipairs(ikeys) do
                local f = rawget(x, k)
                if type(f) == "function" then
                    local ok, y = SAFE_PCALL(function() return f(x, RS) end)
                    if ok and y ~= nil then
                        local l, d = asLoader(y)
                        if l then return l, "tbl:"..k.."(RS) ‚Üí "..d end
                    end
                end
            end
        end
        return nil, nil
    end
    return asLoader(obj)
end

local function locateFsysLoader()
    local candidates = {}

    local function push(ms)
        if isMS(ms) then table.insert(candidates, ms) end
    end

    -- B√∫squedas directas comunes
    push(RS:FindFirstChild("Fsys"))
    push(RS:FindFirstChild("FSys"))
    push(RS:FindFirstChild("fsys"))
    push(RS:FindFirstChild("FsysLoader"))
    push(RS:FindFirstChild("Fsys_Loader"))
    push(RS:FindFirstChild("Loader"))

    -- Profundizar por si est√° anidado en Packages/Shared/etc.
    for _,d in ipairs(RS:GetDescendants()) do
        if d:IsA("ModuleScript") then
            local n = d.Name:lower()
            if n == "fsys" or n == "fsysloader" or n == "fsys_loader" or n == "loader" or n:find("fsys", 1, true) then
                table.insert(candidates, d)
            end
        end
    end

    -- Probar candidatos
    for _,ms in ipairs(candidates) do
        local ok, obj = SAFE_PCALL(function() return require(ms) end)
        if ok and obj ~= nil then
            local loader, desc = _adapt_as_loader(obj)
            if loader then
                logS(("Fsys localizado: %s (%s)"):format(ms:GetFullName(), desc))
                return function(name)
                    if not name or type(name) ~= "string" then return nil end
                    local ok2, mod = SAFE_PCALL(function() return loader(name) end)
                    if ok2 then return mod end
                    return nil
                end
            end
        end
    end

    logW("No se encontr√≥ Fsys operativo. Se usar√° b√∫squeda plana de ModuleScript por nombre.")
    return nil
end

-- Cargador gen√©rico usando Fsys si existe; si no, b√∫squeda exacta por nombre
local FSYS_LOADER = locateFsysLoader()

local function loadM(name)
    -- 1) Fsys
    if FSYS_LOADER then
        local ok, mod = SAFE_PCALL(function() return FSYS_LOADER(name) end)
        if ok and mod then
            logI("M√≥dulo via Fsys:", name)
            return mod
        end
    end
    -- 2) B√∫squeda EXACTA por nombre en todo ReplicatedStorage
    for _,d in ipairs(RS:GetDescendants()) do
        if d:IsA("ModuleScript") and d.Name == name then
            local got = srequire(d)
            if got then
                logI("M√≥dulo por b√∫squeda plana:", name, "‚Üê", d:GetFullName())
                return got
            end
        end
    end
    logW("No se pudo cargar m√≥dulo:", name)
    return nil
end

------------------------------ Config ------------------------------
local CONFIG = {
    autoEnabled           = true,
    statusRefresh         = 1.0,   -- s
    defaultQueueCountdown = 12,    -- s
    inProgressGrace       = 5,     -- s

    coords = {
        joetation    = Vector3.new(-590.8, 35.8, -1667.1),
        coconut_bonk = Vector3.new(-600.3, 41.6, -1610.3),
    },

    sendJoinMessageAfterTP = false, -- no forzamos "join_queue"

    -- Cadencia adaptativa
    actionCadence = { joetation = 0.85, coconut_bonk = 0.80 },
    minCadence = 0.50, maxCadence = 2.00, stepDown = 0.06, stepUp = 0.10,

    -- Cobertura total por tick
    joetation = { triesPerAct = 4, fallbackMaxIdx = 12 },
    coconut   = { pilesToCycle = 4, usesPerAct = 4 },

    enableAFK  = true,
    verboseRPC = true,
}

------------------------------ M√≥dulos (on‚Äëdemand) ------------------------------
local LiveOpsTime           = loadM("LiveOpsTime") or { now = function() return os.clock() end }
local MinigameClientManager = nil
local ClientData            = nil
local function refreshModules()
    if not MinigameClientManager then MinigameClientManager = loadM("MinigameClientManager") end
    if not ClientData then ClientData = loadM("ClientData") end
end

------------------------------ Utils ------------------------------
local function nowS() return LiveOpsTime.now() end
local function srvNow()
    local ok, t = SAFE_PCALL(function()
        if workspace.GetServerTimeNow then
            return workspace:GetServerTimeNow()
        end
        return nowS()
    end)
    return ok and t or nowS()
end
local function hrp() local c=LP.Character; return c and c:FindFirstChild("HumanoidRootPart") end
local function humanoid() local c=LP.Character; return c and c:FindFirstChildWhichIsA("Humanoid") end
local function fmtTime(s) s=math.max(0, math.floor(s)); return string.format("%02d:%02d", math.floor(s/60), s%60) end

logI("Arrancando v7.3‚Ä¶ (LocalScript, patch B)")

------------------------------ TP seguro ------------------------------
local function getRoot()
    local char = LP.Character or LP.CharacterAdded:Wait()
    return char:WaitForChild("HumanoidRootPart"), char:WaitForChild("Humanoid")
end

local function tpTo(v3)
    if typeof(v3) ~= "Vector3" then return end
    local root, hum = getRoot(); if not root or not hum then return end

    if workspace.StreamingEnabled and isFn(LP.RequestStreamAroundAsync) then
        SAFE_PCALL(function() LP:RequestStreamAroundAsync(v3, 128) end)
    end

    local oldState
    SAFE_PCALL(function() oldState=hum:GetState(); hum:ChangeState(Enum.HumanoidStateType.Physics) end)
    local look = (root.CFrame * CFrame.new(0,0,-1)).Position
    root.CFrame = CFrame.new(v3 + Vector3.new(0,3,0), look)
    task.delay(0.12, function()
        if hum and hum.Parent then SAFE_PCALL(function() if oldState then hum:ChangeState(oldState) end end) end
    end)
end

------------------------------ Estado / ETA ------------------------------
local function getClient(id)
    refreshModules()
    if not MinigameClientManager or typeof(MinigameClientManager.get) ~= "function" then return nil end
    local ok,cli = SAFE_PCALL(function() return MinigameClientManager.get(id) end)
    return ok and cli or nil
end

local function readStatus(cli)
    local st = { active=false, loading=false, inQueue=false, timeLeft=nil, raw=nil }
    local ms = cli and cli.minigame_state
    local now = srvNow()

    if ms then
        local get = (typeof(ms.get)=="function") and function(k)
            local ok,v = SAFE_PCALL(function() return ms:get(k) end)
            return ok and v or nil
        end or function() return nil end

        st.active  = get("is_game_active") or false
        st.loading = get("players_loading") or false

        if typeof(ms.get_as_table)=="function" then
            local t; SAFE_PCALL(function() t = ms:get_as_table("queued_user_ids") end)
            if type(t)=="table" then for _,uid in ipairs(t) do if uid==LP.UserId then st.inQueue=true break end end end
        end

        local zts = get("zone_override_timestamp")
        if typeof(zts)=="number" and zts>0 then
            st.timeLeft = math.max(0, math.floor(zts - now)); st.raw="zone_override_timestamp"
        end
    end

    if cli and cli.is_participating and cli.end_time then
        st.active = true
        st.timeLeft = math.max(0, math.floor(cli.end_time - now))
        st.raw = st.raw or "client.end_time"
    end

    if (not st.timeLeft) and ClientData and cli and cli.cycle_timestamp_key and typeof(ClientData.get)=="function" then
        SAFE_PCALL(function()
            local rec = ClientData.get(cli.cycle_timestamp_key)
            local ts = rec and (rec.timestamp or rec.t or rec.next_timestamp)
            if ts then st.timeLeft = math.max(0, math.floor(ts - now)); st.raw="ClientData.cycle_timestamp" end
        end)
    end

    return st
end

local function etaToStart(cli, st)
    if st.active then return (st.timeLeft or CONFIG.defaultQueueCountdown) + CONFIG.inProgressGrace, false, st.raw end
    if st.loading then return 5, true, "players_loading" end
    if st.timeLeft and st.timeLeft > 0 then return st.timeLeft, true, st.raw end
    return CONFIG.defaultQueueCountdown, true, "fallback"
end

local function statusAndEta(id)
    local cli = getClient(id); if not cli then return nil end
    local st = readStatus(cli)
    local eta, joinable, raw = etaToStart(cli, st)
    return { id=id, cli=cli, st=st, eta=eta, joinable=joinable, raw=raw }
end

local ORDER = { "joetation", "coconut_bonk" }
local function pickBest()
    local best, bestEta
    for _,id in ipairs(ORDER) do
        local r = statusAndEta(id)
        if r then
            logI(string.format("üì° ETA %-13s ‚Üí ‚è± %s  (%s)  active=%s  inQueue=%s",
                id, fmtTime(r.eta), r.raw or "fallback", tostring(r.st.active), tostring(r.st.inQueue)))
            if r.eta < (bestEta or math.huge) then best, bestEta = id, r.eta end
        else
            logW(string.format("üì° ETA %-13s ‚Üí sin datos (cliente no disponible)", id))
        end
    end
    return best or "joetation"
end

------------------------------ Autoplay (full cobertura) ------------------------------
local dynCad, lastAct = {}, {}
for k,v in pairs(CONFIG.actionCadence) do dynCad[k]=v end

local function canAct(id)
    local cad = dynCad[id] or 1.0
    local t = nowS()
    if not lastAct[id] or (t-lastAct[id])>=cad then lastAct[id]=t; return true end
    return false
end

local function tuneCad(id, ok)
    local cad = dynCad[id] or 1.0
    if ok then cad = math.max(CONFIG.minCadence, cad - CONFIG.stepDown)
    else cad = math.min(CONFIG.maxCadence, cad + CONFIG.stepUp) end
    dynCad[id] = cad
    logI(string.format("‚è≤Ô∏è Cadencia %-13s ‚Üí %.2fs (ok=%s)", id, cad, tostring(ok)))
end

local function rpc(cli, route, ...)
    if not cli or typeof(cli.message_server) ~= "function" then return false end
    local ok, err = SAFE_PCALL(function() return cli:message_server(route, ...) end)
    if not ok and CONFIG.verboseRPC then logW("üì® RPC FAIL:", route, err) end
    return ok
end

-- Cursores round‚Äërobin
local cannonCursor, shipCursor, pileIdx = 1, 1, 1

local function cannonList(cli)
    local arr = {}
    local okList, cannons = SAFE_PCALL(function() return cli.cannons_world end)
    cannons = okList and cannons or nil
    if type(cannons)=="table" and #cannons>0 then
        for i=1,#cannons do arr[#arr+1]=i end
    else
        for i=1,CONFIG.joetation.fallbackMaxIdx do arr[#arr+1]=i end
    end
    return arr
end

local function shipUidList(cli)
    local arr = {}
    local okMap, ships = SAFE_PCALL(function() return cli.ships_by_uid end)
    ships = okMap and ships or nil
    if type(ships)=="table" then
        for uid,_ in pairs(ships) do arr[#arr+1]=uid end
    end
    return arr
end

-- Joetation: recoger siempre y disparar a varios ca√±ones por tick (round‚Äërobin)
local function act_joetation(cli)
    if not canAct("joetation") then return end
    local root = hrp(); local pos = root and root.Position or Vector3.new()

    rpc(cli, "pickup_holdable_from_pile", pos, nowS())
    logI("üéí [joetation] pickup_holdable_from_pile")

    local list = cannonList(cli)
    local okAny = false
    for n=1, math.max(1, CONFIG.joetation.triesPerAct) do
        if #list == 0 then break end
        local idx = list[cannonCursor]
        cannonCursor = (cannonCursor % #list) + 1
        local ok = rpc(cli, "use_cannon", idx, pos, nowS())
        logI(string.format("üí• [joetation] intento %d/%d ‚Üí cannon=%d ‚Üí ok=%s",
            n, CONFIG.joetation.triesPerAct, idx, tostring(ok)))
        okAny = okAny or ok
    end
    if not okAny then logW("üí§ [joetation] sin disparo exitoso este tick, reintentando‚Ä¶") end
    tuneCad("joetation", okAny)
end

-- Coconut Bonk: recoger siempre y usar contra varios barcos por tick (round‚Äërobin)
local function act_coconut(cli)
    if not canAct("coconut_bonk") then return end

    rpc(cli, "pickup_droppable", pileIdx)
    logI(string.format("üéí [coconut] pickup_droppable ‚Üí pile=%d", pileIdx))
    pileIdx = (pileIdx % CONFIG.coconut.pilesToCycle) + 1

    local uids = shipUidList(cli)
    if #uids == 0 then
        logW("üõ∂ [coconut] a√∫n no hay ships_by_uid visibles; reintentamos‚Ä¶")
        tuneCad("coconut_bonk", false)
        return
    end

    local okAny = false
    for n=1, math.max(1, CONFIG.coconut.usesPerAct) do
        if shipCursor > #uids then shipCursor = 1 end
        local uid = uids[shipCursor]
        shipCursor = shipCursor + 1
        local ok = rpc(cli, "used_droppable", uid)
        logI(string.format("üîß [coconut] intento %d/%d ‚Üí uid=%s ‚Üí ok=%s",
            n, CONFIG.coconut.usesPerAct, tostring(uid), tostring(ok)))
        okAny = okAny or ok
    end
    if not okAny then logW("üí§ [coconut] sin uso exitoso este tick, reintentando‚Ä¶") end
    tuneCad("coconut_bonk", okAny)
end

------------------------------ Anti‚ÄëAFK ------------------------------
if CONFIG.enableAFK then
    LP.Idled:Connect(function()
        local vu = game:GetService("VirtualUser")
        vu:CaptureController(); vu:ClickButton2(Vector2.new())
        logI("üñ±Ô∏è Anti‚ÄëAFK: click simulado.")
    end)
end

------------------------------ Bucle principal ------------------------------
task.spawn(function()
    logI("‚ú® Listo. AUTO =", CONFIG.autoEnabled and "ON" or "OFF")
    local currentPlaying -- "joetation" | "coconut_bonk" | nil

    while true do
        if CONFIG.autoEnabled then
            -- ¬øEstamos jugando?
            local anyPlaying, playingId = false, nil
            for _, id in ipairs(ORDER) do
                local r = statusAndEta(id)
                if r and r.cli and r.cli.is_participating then anyPlaying=true; playingId=id end
            end

            if not anyPlaying then
                local best = pickBest()
                if currentPlaying ~= nil then logS("üèÅ Partida anterior finalizada.") end
                currentPlaying = nil

                local target = CONFIG.coords[best] or CONFIG.coords.joetation
                logI(string.format("üß≠ TP ‚Üí %-13s @ (%.1f, %.1f, %.1f)", best, target.X, target.Y, target.Z))
                tpTo(target)

                if CONFIG.sendJoinMessageAfterTP then
                    local r = statusAndEta(best)
                    if r and r.cli then SAFE_PCALL(function() r.cli:message_server("join_queue") end) end
                    logI("üì® join_queue (opcional) enviado.")
                end

                task.wait(2)
            else
                if currentPlaying ~= playingId then
                    currentPlaying = playingId
                    cannonCursor, shipCursor, pileIdx = 1, 1, 1
                    logS(string.format("üéÆ Entraste a %s. Autoplay FULL ON.", currentPlaying))
                end

                local r = statusAndEta(currentPlaying)
                if r and r.cli and r.cli.is_participating then
                    if currentPlaying=="joetation" then act_joetation(r.cli) else act_coconut(r.cli) end
                end

                task.wait(0.1)
            end
        else
            task.wait(0.25)
        end

        task.wait(CONFIG.statusRefresh)
    end
end)
