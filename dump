-- DumpHouseInfo.lua
-- Vuelca TODA la información del interior de la casa y cada mueble.
-- Guarda el JSON en PlayerGui/HouseDump/Dump_<timestamp>

local Fsys = require(game.ReplicatedStorage:WaitForChild("Fsys"))
local load = Fsys.load

local ClientData            = load("ClientData")
local InteriorsM            = load("InteriorsM")
local FurnitureDB           = load("FurnitureDB")
local FurnitureModelTracker = load("FurnitureModelTracker")
local HttpService           = game:GetService("HttpService")
local Players               = game:GetService("Players")

--------------------------------------------------------------------
-- Utilidades de serialización seguras
--------------------------------------------------------------------
local function safeSerializeCF(cf)
	if typeof(cf) == "CFrame" then
		local p = cf.Position
		local look = (cf - cf.Position).LookVector
		return {
			__type = "CFrame",
			pos = {p.X, p.Y, p.Z},
			look = {look.X, look.Y, look.Z},
		}
	end
	return cf
end

local function serializeColor(color)
	if typeof(color) == "Color3" then
		local r0,g0,b0 = color.R,color.G,color.B
		local r = math.clamp(r0,0,1)
		local g = math.clamp(g0,0,1)
		local b = math.clamp(b0,0,1)
		-- hex manual sin warnings
		local hex = string.format("%02X%02X%02X", math.floor(r*255+0.5), math.floor(g*255+0.5), math.floor(b*255+0.5))
		return {
			__type="Color3",
			r=r0,g=g0,b=b0,
			hex=hex,
			clamped = (r~=r0 or g~=g0 or b~=b0) or nil
		}
	end
	return color
end

-- Convierte cualquier valor a algo serializable por JSONEncode evitando ciclos.
local function serializeValue(v, visited)
	local t = typeof(v)

	if t == "number" or t == "string" or t == "boolean" or t == "nil" then
		return v
	end
	if t == "Color3" then
		return serializeColor(v)
	end
	if t == "CFrame" then
		return safeSerializeCF(v)
	end
	if t == "Vector3" then
		return {__type="Vector3", x=v.X, y=v.Y, z=v.Z}
	end
	if t == "ColorSequence" then
		local out = {__type="ColorSequence", keypoints={}}
		for _,kp in ipairs(v.Keypoints) do
			table.insert(out.keypoints, {time = kp.Time, value = serializeColor(kp.Value)})
		end
		return out
	end
	if t == "NumberSequence" then
		local out = {__type="NumberSequence", keypoints={}}
		for _,kp in ipairs(v.Keypoints) do
			table.insert(out.keypoints, {time = kp.Time, value = kp.Value})
		end
		return out
	end
	if t == "Instance" then
		return {
			__type = "Instance",
			class = v.ClassName,
			name = v.Name,
			fullName = v:GetFullName()
		}
	end
	if t == "table" then
		if visited[v] then
			return {__ref = visited[v]}
		end
		local id = "tbl_"..tostring(#visited + 1)
		visited[v] = id
		local out = { __id = id }
		for k,val in pairs(v) do
			out[tostring(k)] = serializeValue(val, visited)
		end
		return out
	end
	return tostring(v)
end

local function serializeModel(model, visited)
	if not model then return nil end
	local info = {
		name = model.Name,
		fullName = model:GetFullName(),
		attributes = {},
		children = {},
	}

	for a,v in pairs(model:GetAttributes()) do
		info.attributes[a] = serializeValue(v, visited)
	end

	for _,desc in ipairs(model:GetDescendants()) do
		if desc:IsA("BasePart") then
			table.insert(info.children, {
				name = desc.Name,
				class = desc.ClassName,
				size = {desc.Size.X, desc.Size.Y, desc.Size.Z},
				color = serializeColor(desc.Color),
				transparency = desc.Transparency,
				anchored = desc.Anchored,
				cframe = safeSerializeCF(desc.CFrame)
			})
		end
	end
	return info
end

local function waitForHouseInterior(timeout)
	local t0 = os.clock()
	while true do
		local interior = ClientData.get("house_interior")
		local loc = InteriorsM.get_current_location()
		if interior and loc and loc.destination_id == "housing" then
			return interior
		end
		if timeout and os.clock() - t0 > timeout then
			return nil
		end
		task.wait(0.2)
	end
end

--------------------------------------------------------------------
-- Volcado principal
--------------------------------------------------------------------
local function buildDump()
	local visited = {}

	local interior = ClientData.get("house_interior")
	if not interior then
		return {error = "No hay interior cargado."}
	end

	local houseInfo = {}
	for k,v in pairs(interior) do
		if k ~= "furniture" then
			houseInfo[k] = serializeValue(v, visited)
		end
	end

	local addons = {}
	if interior.active_addons then
		for _,name in ipairs(interior.active_addons) do
			addons[name] = true
		end
	elseif interior.addons then
		for name,enabled in pairs(interior.addons) do
			if enabled then addons[name] = true end
		end
	end
	houseInfo.active_addons_resolved = addons

	local furnitureDump = {}
	for unique, data in pairs(interior.furniture or {}) do
		local dbEntry = FurnitureDB[data.id]
		local model = FurnitureModelTracker.get_furniture_by_unique(unique)

		local dbSerialized
		if dbEntry then
			dbSerialized = {}
			for k,v in pairs(dbEntry) do
				dbSerialized[k] = serializeValue(v, visited)
			end
		end

		local entry = {
			unique = unique,
			furniture_data = {
				id = data.id,
				cframe = serializeValue(data.cframe, visited),
				scale = serializeValue(data.scale, visited),
				colors = serializeValue(data.colors, visited),
				mutated = data.mutated,
			},
			db = dbSerialized,
			model = serializeModel(model, visited),
		}

		for k,v in pairs(data) do
			if entry.furniture_data[k] == nil then
				entry.furniture_data[k] = serializeValue(v, visited)
			end
		end

		table.insert(furnitureDump, entry)
	end

	table.sort(furnitureDump, function(a,b)
		return tostring(a.furniture_data.id) < tostring(b.furniture_data.id)
	end)

	return {
		time = os.time(),
		location = serializeValue(InteriorsM.get_current_location(), visited),
		house = houseInfo,
		furniture_count = #furnitureDump,
		furniture = furnitureDump
	}
end

--------------------------------------------------------------------
-- Guardar JSON en PlayerGui
--------------------------------------------------------------------
local function saveJSON(jsonText)
	local pg = Players.LocalPlayer:WaitForChild("PlayerGui")
	local folder = pg:FindFirstChild("HouseDump")
	if not folder then
		folder = Instance.new("Folder")
		folder.Name = "HouseDump"
		folder.Parent = pg
	end
	local sv = Instance.new("StringValue")
	sv.Name = "Dump_" .. tostring(os.time())
	sv.Value = jsonText
	sv.Parent = folder
	return sv
end

--------------------------------------------------------------------
-- Función pública
--------------------------------------------------------------------
function DumpHouse()
	local dump = buildDump()
	local ok, json = pcall(function()
		return HttpService:JSONEncode(dump)
	end)
	if ok then
		print("===== DUMP CASA (JSON) =====")
		print(json)
		saveJSON(json)
		print("[DumpHouse] Guardado en PlayerGui/HouseDump")
	else
		warn("Error codificando JSON:", json)
		print("Tabla Lua (no serializable):", dump)
	end
	return dump
end

--------------------------------------------------------------------
-- Auto‑ejecución al cargar
--------------------------------------------------------------------
task.spawn(function()
	local interior = waitForHouseInterior(30)
	if not interior then
		warn("[DumpHouse] No se cargó la casa en 30s.")
		return
	end
	print("[DumpHouse] Casa detectada; generando volcado...")
	DumpHouse()
end)

-- DumpHouse() para volver a ejecutar.
