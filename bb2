-- AutoMinigames ‚Äì Smart ETA + TP + FULL AutoPlay (v7_2)
-- Coloca este archivo como LocalScript en StarterPlayerScripts (cliente).

---------------------------------------------------------------------- 
-- Nota: no usamos pcall en la l√≠nea 1 para evitar fallos si alguien
-- sobrescribe pcall en _G. En su lugar, a partir de la l√≠nea 5 usamos SAFE_PCALL.
----------------------------------------------------------------------

------------------------------ Utilidades base ------------------------------
local SAFE_PCALL
do
    local _pcall = rawget(_G, "pcall")
    if type(_pcall) == "function" then
        SAFE_PCALL = function(fn, ...)
            return _pcall(fn, ...)
        end
    else
        SAFE_PCALL = function(fn, ...)
            -- Si no existe pcall, ejecutamos sin protecci√≥n
            return true, fn(...)
        end
    end
end

------------------------------ Servicios ------------------------------
local Players    = game:GetService("Players")
local RS         = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

if not RunService:IsClient() then
    warn("[AutoMG] ‚ùå Este script debe ser un LocalScript (cliente).")
    return
end

local LP = Players.LocalPlayer
if not LP then
    warn("[AutoMG] ‚ùå No se pudo obtener LocalPlayer.")
    return
end

------------------------------ Helpers ------------------------------
local function isFn(x)  return type(x) == "function" end
local function isMS(x)  return typeof(x) == "Instance" and x:IsA("ModuleScript") end

local function srequire(ms)
    if not isMS(ms) then return nil end
    local ok, mod = SAFE_PCALL(function() return require(ms) end)
    return ok and mod or nil
end

local function loadM(name)
    -- 1) Fsys.load
    local Fsys = srequire(RS:FindFirstChild("Fsys"))
    local FSYS_LOAD = Fsys and isFn(Fsys.load) and Fsys.load or nil
    if FSYS_LOAD then
        local ok, mod = SAFE_PCALL(function() return FSYS_LOAD(name) end)
        if ok and mod then return mod end
    end
    -- 2) Buscar en ClientModules y SharedModules
    for _, rootName in ipairs({"ClientModules","SharedModules"}) do
        local root = RS:FindFirstChild(rootName, true)
        if root then
            local m = root:FindFirstChild(name, true)
            local got = srequire(m)
            if got then return got end
        end
    end
    return nil
end

------------------------------ Config ------------------------------
local CONFIG = {
    autoEnabled           = true,
    statusRefresh         = 1.0,   -- segundos entre checks de estado
    defaultQueueCountdown = 12,    -- segundos fallback
    inProgressGrace       = 5,     -- segundos extra si ya estamos en juego

    coords = {
        joetation    = Vector3.new(-590.8, 35.8, -1667.1),
        coconut_bonk = Vector3.new(-600.3, 41.6, -1610.3),
    },

    sendJoinMessageAfterTP = false,

    actionCadence = { joetation = 0.85, coconut_bonk = 0.80 },
    minCadence    = 0.50,
    maxCadence    = 2.00,
    stepDown      = 0.06,
    stepUp        = 0.10,

    joetation = { triesPerAct = 4, fallbackMaxIdx = 12 },
    coconut   = { pilesToCycle = 4, usesPerAct = 4 },

    enableAFK  = true,
    verboseRPC = true,
}

------------------------------ M√≥dulos (on‚Äëdemand) ------------------------------
local LiveOpsTime           = loadM("LiveOpsTime") or { now = function() return os.clock() end }
local MinigameClientManager = nil
local ClientData            = nil
local function refreshModules()
    if not MinigameClientManager then MinigameClientManager = loadM("MinigameClientManager") end
    if not ClientData           then ClientData           = loadM("ClientData")            end
end

------------------------------ Utils & Logs ------------------------------
local function nowS() return LiveOpsTime.now() end
local function srvNow()
    if isFn(workspace.GetServerTimeNow) then
        return workspace:GetServerTimeNow()
    end
    return nowS()
end
local function ts()
    local t = os.date("*t")
    return string.format("%02d:%02d:%02d", t.hour, t.min, t.sec)
end
local function fmtTime(s)
    s = math.max(0, math.floor(s))
    return string.format("%02d:%02d", math.floor(s/60), s%60)
end

local function LOG(tag, ...) print(string.format("%s %s", tag, ts()), ...) end
local function logI(...) LOG("üü¢ [AutoMG]", ...) end
local function logW(...) LOG("‚ö†Ô∏è  [AutoMG]", ...) end
local function logE(...) LOG("üõë [AutoMG]", ...) end
local function logS(...) LOG("‚úÖ [AutoMG]", ...) end

logI("Arrancando v7.2‚Ä¶ (con SAFE_PCALL)")

------------------------------ Teleport seguro ------------------------------
local function getRoot()
    local char = LP.Character or LP.CharacterAdded:Wait()
    return char:WaitForChild("HumanoidRootPart"), char:WaitForChild("Humanoid")
end

local function tpTo(v3)
    if typeof(v3) ~= "Vector3" then return end
    local root, hum = getRoot()
    if not root or not hum then return end

    if workspace.StreamingEnabled and isFn(LP.RequestStreamAroundAsync) then
        SAFE_PCALL(function() LP:RequestStreamAroundAsync(v3, 128) end)
    end

    local oldState
    SAFE_PCALL(function()
        oldState = hum:GetState()
        hum:ChangeState(Enum.HumanoidStateType.Physics)
    end)

    local look = (root.CFrame * CFrame.new(0,0,-1)).Position
    root.CFrame = CFrame.new(v3 + Vector3.new(0,3,0), look)

    task.delay(0.12, function()
        if hum and hum.Parent and oldState then
            SAFE_PCALL(function() hum:ChangeState(oldState) end)
        end
    end)
end

------------------------------ Estado / ETA ------------------------------
local function getClient(id)
    refreshModules()
    if not MinigameClientManager or not isFn(MinigameClientManager.get) then
        return nil
    end
    local ok, cli = SAFE_PCALL(function() return MinigameClientManager.get(id) end)
    return ok and cli or nil
end

local function readStatus(cli)
    local st = { active=false, loading=false, inQueue=false, timeLeft=nil, raw=nil }
    local ms = cli and cli.minigame_state
    local now = srvNow()

    if ms then
        local getter = isFn(ms.get) and function(k)
            local ok,v = SAFE_PCALL(function() return ms:get(k) end)
            return ok and v or nil
        end or function() return nil end

        st.active  = getter("is_game_active") or false
        st.loading = getter("players_loading") or false

        if isFn(ms.get_as_table) then
            local list
            SAFE_PCALL(function() list = ms:get_as_table("queued_user_ids") end)
            if type(list)=="table" then
                for _, uid in ipairs(list) do
                    if uid == LP.UserId then st.inQueue = true break end
                end
            end
        end

        local zts = getter("zone_override_timestamp")
        if typeof(zts)=="number" and zts>0 then
            st.timeLeft = math.max(0, math.floor(zts - now))
            st.raw      = "zone_override_timestamp"
        end
    end

    if cli and cli.is_participating and cli.end_time then
        st.active   = true
        st.timeLeft = math.max(0, math.floor(cli.end_time - now))
        st.raw      = st.raw or "client.end_time"
    end

    if not st.timeLeft and ClientData and cli and cli.cycle_timestamp_key and isFn(ClientData.get) then
        SAFE_PCALL(function()
            local rec = ClientData.get(cli.cycle_timestamp_key)
            local tt  = rec and (rec.timestamp or rec.t or rec.next_timestamp)
            if tt then
                st.timeLeft = math.max(0, math.floor(tt - now))
                st.raw      = "ClientData.cycle_timestamp"
            end
        end)
    end

    return st
end

local function etaToStart(cli, st)
    if st.active  then return (st.timeLeft or CONFIG.defaultQueueCountdown) + CONFIG.inProgressGrace, false, st.raw end
    if st.loading then return 5, true, "players_loading" end
    if st.timeLeft and st.timeLeft>0 then return st.timeLeft, true, st.raw end
    return CONFIG.defaultQueueCountdown, true, "fallback"
end

local function statusAndEta(id)
    local cli = getClient(id)
    if not cli then return nil end
    local st  = readStatus(cli)
    local eta, joinable, raw = etaToStart(cli, st)
    return { id=id, cli=cli, st=st, eta=eta, joinable=joinable, raw=raw }
end

local ORDER = { "joetation", "coconut_bonk" }
local function pickBest()
    local best, bestEta
    for _, id in ipairs(ORDER) do
        local r = statusAndEta(id)
        if r then
            logI(string.format("üì° ETA %-13s ‚Üí ‚è± %s (%s) active=%s inQueue=%s",
                id, fmtTime(r.eta), r.raw or "?", tostring(r.st.active), tostring(r.st.inQueue)))
            if r.eta < (bestEta or math.huge) then
                best, bestEta = id, r.eta
            end
        else
            logW("üì° ETA", id, "‚Üí sin datos")
        end
    end
    return best or "joetation"
end

------------------------------ Autoplay FULL ------------------------------
local dynCad, lastAct = {}, {}
for k,v in pairs(CONFIG.actionCadence) do dynCad[k] = v end

local function canAct(id)
    local now = nowS()
    local cad = dynCad[id] or 1.0
    if not lastAct[id] or (now - lastAct[id]) >= cad then
        lastAct[id] = now
        return true
    end
    return false
end

local function tuneCad(id, ok)
    local cad = dynCad[id] or 1.0
    cad = ok
        and math.max(CONFIG.minCadence, cad - CONFIG.stepDown)
        or math.min(CONFIG.maxCadence, cad + CONFIG.stepUp)
    dynCad[id] = cad
    logI(string.format("‚è≤Ô∏è Cadencia %-13s ‚Üí %.2fs (ok=%s)", id, cad, tostring(ok)))
end

local function rpc(cli, route, ...)
    if not cli or not isFn(cli.message_server) then
        return false
    end
    local ok, err = SAFE_PCALL(function() return cli:message_server(route, ...) end)
    if not ok and CONFIG.verboseRPC then
        logW("üì® RPC FAIL:", route, err)
    end
    return ok
end

-- Round‚Äërobin cursors
local cannonCursor, shipCursor, pileIdx = 1, 1, 1

local function cannonList(cli)
    local arr = {}
    local ok, cannons = SAFE_PCALL(function() return cli.cannons_world end)
    if ok and type(cannons)=="table" and #cannons>0 then
        for i=1,#cannons do table.insert(arr,i) end
    else
        for i=1,CONFIG.joetation.fallbackMaxIdx do table.insert(arr,i) end
    end
    return arr
end

local function shipUidList(cli)
    local arr = {}
    local ok, ships = SAFE_PCALL(function() return cli.ships_by_uid end)
    if ok and type(ships)=="table" then
        for uid in pairs(ships) do table.insert(arr,uid) end
    end
    return arr
end

local function act_joetation(cli)
    if not canAct("joetation") then return end
    local root = LP.Character and LP.Character:FindFirstChild("HumanoidRootPart")
    local pos  = root and root.Position or Vector3.new()
    rpc(cli, "pickup_holdable_from_pile", pos, nowS())
    logI("üéí [joetation] pickup_holdable_from_pile")

    local list  = cannonList(cli)
    local okAny = false
    for n=1, CONFIG.joetation.triesPerAct do
        if #list==0 then break end
        local idx = list[cannonCursor]
        cannonCursor = cannonCursor % #list + 1
        local ok = rpc(cli, "use_cannon", idx, pos, nowS())
        logI(string.format("üí• [joetation] intento %d/%d ‚Üí cannon=%d ‚Üí ok=%s",
            n, CONFIG.joetation.triesPerAct, idx, tostring(ok)))
        okAny = okAny or ok
    end
    if not okAny then
        logW("üí§ [joetation] ning√∫n disparo exitoso este tick.")
    end
    tuneCad("joetation", okAny)
end

local function act_coconut(cli)
    if not canAct("coconut_bonk") then return end
    rpc(cli, "pickup_droppable", pileIdx)
    logI(string.format("üéí [coconut] pickup_droppable ‚Üí pile=%d", pileIdx))
    pileIdx = pileIdx % CONFIG.coconut.pilesToCycle + 1

    local uids = shipUidList(cli)
    if #uids==0 then
        logW("üõ∂ [coconut] no hay barcos visibles.")
        tuneCad("coconut_bonk", false)
        return
    end

    local okAny = false
    for n=1, CONFIG.coconut.usesPerAct do
        if shipCursor > #uids then shipCursor = 1 end
        local uid = uids[shipCursor]
        shipCursor = shipCursor + 1
        local ok = rpc(cli, "used_droppable", uid)
        logI(string.format("üîß [coconut] intento %d/%d ‚Üí uid=%s ‚Üí ok=%s",
            n, CONFIG.coconut.usesPerAct, tostring(uid), tostring(ok)))
        okAny = okAny or ok
    end
    if not okAny then
        logW("üí§ [coconut] ning√∫n uso exitoso este tick.")
    end
    tuneCad("coconut_bonk", okAny)
end

------------------------------ Anti‚ÄëAFK ------------------------------
if CONFIG.enableAFK then
    LP.Idled:Connect(function()
        local vu = game:GetService("VirtualUser")
        vu:CaptureController()
        vu:ClickButton2(Vector2.new())
        logI("üñ±Ô∏è Anti‚ÄëAFK: click simulado.")
    end)
end

------------------------------ Bucle principal ------------------------------
task.spawn(function()
    logI("‚ú® Listo. AUTO =", CONFIG.autoEnabled and "ON" or "OFF")
    local currentPlaying

    while true do
        if CONFIG.autoEnabled then
            -- ¬øEn partida?
            local anyPlaying, playingId = false, nil
            for _, id in ipairs(ORDER) do
                local r = statusAndEta(id)
                if r and r.cli and r.cli.is_participating then
                    anyPlaying, playingId = true, id
                end
            end

            if not anyPlaying then
                -- Elegir siguiente
                local best = pickBest()
                if currentPlaying then logS("üèÅ Partida anterior finalizada.") end
                currentPlaying = nil

                local target = CONFIG.coords[best] or CONFIG.coords.joetation
                logI(string.format("üß≠ TP ‚Üí %-13s @ (%.1f,%.1f,%.1f)",
                    best, target.X, target.Y, target.Z))
                tpTo(target)

                if CONFIG.sendJoinMessageAfterTP then
                    local r = statusAndEta(best)
                    if r and r.cli then
                        SAFE_PCALL(function() r.cli:message_server("join_queue") end)
                    end
                    logI("üì® join_queue enviado.")
                end

                task.wait(2)
            else
                -- Jugando: full autoplay
                if currentPlaying ~= playingId then
                    currentPlaying = playingId
                    cannonCursor, shipCursor, pileIdx = 1, 1, 1
                    logS("üéÆ Entraste a", playingId, "- Autoplay FULL ON.")
                end

                local r = statusAndEta(currentPlaying)
                if r and r.cli and r.cli.is_participating then
                    if currentPlaying == "joetation" then
                        act_joetation(r.cli)
                    else
                        act_coconut(r.cli)
                    end
                end
                task.wait(0.1)
            end
        else
            task.wait(0.25)
        end

        task.wait(CONFIG.statusRefresh)
    end
end)
