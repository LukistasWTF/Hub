--═════════════════════════════════════════════════════════════════════
--  ReplicateHouseFromURL.lua   (versión 2025‑07‑25)
--     • Input URL  → descarga dump_house_basic.json
--     • Muestra metadatos y botón “Replicate”
--     • Replica texturas, add‑ons y muebles en lotes
--═════════════════════════════════════════════════════════════════════

--------------------------------------------------------------------- ajustes
local ROUTE_ENTER_EDIT_MODE = "HousingAPI/EnterEditMode"
local ROUTE_EXIT_EDIT_MODE  = "HousingAPI/ExitEditMode"
local ROUTE_PLACE_FURNITURE = "HousingAPI/PlaceFurniture"
local ROUTE_SET_TEXTURE     = "HousingAPI/SetRoomTexture"
local ROUTE_MODIFY_ADDONS   = "HousingAPI/ModifyHouseAddons"

local BATCH_SIZE   = 10     -- muebles por lote
local WAIT_BATCH   = 0.12   -- pausa entre lotes
local WAIT_TEXTURE = 0.05   -- pausa texturas / add‑ons
--------------------------------------------------------------------- servicios
local RS          = game:GetService("ReplicatedStorage")
local Players     = game:GetService("Players")
local LP          = Players.LocalPlayer
local HttpService = game:GetService("HttpService")

--------------------------------------------------------------------- Fsys / módulos
local Fsys        = require(RS:WaitForChild("Fsys"))
local load        = Fsys.load
local Roact       = load("Roact")
local RouterClient= load("RouterClient")
local HouseClient = load("HouseClient")

--------------------------------------------------------------------- helpers remotos
local function findRemote(route)          -- no bloquea
    return RS:FindFirstChild(route, true)
end

local function safeInvoke(remote, ...)
    if not remote or not remote.InvokeServer then
        return false, "remote nil"
    end
    return pcall(remote.InvokeServer, remote, ...)
end

local function safeFire(remote, ...)
    if remote and remote.FireServer then
        pcall(remote.FireServer, remote, ...)
    end
end

--------------------------------------------------------------------- esperar edit‑mode
local function waitForEditMode(timeout)
    local t0 = tick()
    while true do
        if HouseClient.is_edit_mode_active() then
            return true
        end
        if timeout and tick() - t0 > timeout then
            return false
        end
        task.wait(0.2)
    end
end

--------------------------------------------------------------------- proxy HTTP
local proxyRF                                    -- se crea la primera vez
local function getProxy()
    if proxyRF then return proxyRF end
    proxyRF = Instance.new("RemoteFunction")
    proxyRF.Name = "__ReplicateHttpProxy"
    proxyRF.Parent = RS
    proxyRF.OnServerInvoke = function(_, url)
        local ok, res = pcall(HttpService.GetAsync, HttpService, url, false)
        return ok, ok and res or tostring(res)
    end
    return proxyRF
end

local function httpFetch(url)
    -- syn / fluxus / krnl …
    local req = (syn and syn.request) or (http and http.request) or request
    if req then
        local r = req{Url = url, Method = "GET"}
        if r and r.StatusCode == 200 then return r.Body end
    end
    -- game:HttpGet
    if game.HttpGet then
        local ok, body = pcall(game.HttpGet, game, url)
        if ok then return body end
    end
    -- fallback a proxy interno
    local ok, res = getProxy():InvokeServer(url)
    if ok then return res end
    error(res)
end

--------------------------------------------------------------------- eventos progreso
local DownloadEvent  = Instance.new("BindableEvent") -- bytes / KB
local ReplicateEvent = Instance.new("BindableEvent") -- muebles colocados

--------------------------------------------------------------------- rutina principal
local function replicateHouse(dump, setStatus)
    task.spawn(function()
        ------------------------------------------------------------------ entrar modo edición
        local enterRemote = findRemote(ROUTE_ENTER_EDIT_MODE)
        local inEdit = false
        if enterRemote then
            inEdit = safeInvoke(enterRemote) and waitForEditMode(3)
        end
        if not inEdit then
            setStatus("Pulsa el botón *Edit House* (15 s)…")
            if not waitForEditMode(15) then
                setStatus("❌ No se pudo entrar en modo edición.")
                return
            end
        end
        setStatus("✓ Edit mode detectado")

        ------------------------------------------------------------------ texturas
        local setTexR = findRemote(ROUTE_SET_TEXTURE)
        if dump.house and dump.house.textures and setTexR then
            for roomId, room in pairs(dump.house.textures) do
                for texType, texId in pairs(room) do
                    safeInvoke(setTexR, roomId, texType, texId)
                    task.wait(WAIT_TEXTURE)
                end
            end
        end

        ------------------------------------------------------------------ add‑ons
        local addR = findRemote(ROUTE_MODIFY_ADDONS)
        if dump.house and dump.house.active_addons_resolved and addR then
            safeInvoke(addR, dump.house.house_id or 0, dump.house.active_addons_resolved)
            task.wait(WAIT_TEXTURE)
        end

        ------------------------------------------------------------------ muebles
        local placeR = findRemote(ROUTE_PLACE_FURNITURE)
        local list   = dump.furniture or {}
        for i, entry in ipairs(list) do
            local f = entry.furniture_data
            if placeR then
                safeInvoke(placeR, {
                    id     = f.id,
                    cframe = f.cframe,
                    scale  = f.scale,
                    colors = f.colors,
                })
            end
            if i % BATCH_SIZE == 0 then task.wait(WAIT_BATCH) end
            ReplicateEvent:Fire(i, #list)
        end

        ------------------------------------------------------------------ salir edición
        local exitRemote = findRemote(ROUTE_EXIT_EDIT_MODE)
        safeInvoke(exitRemote)
        setStatus("✅ Replicación completada")
    end)
end

--------------------------------------------------------------------- UI
local Ui = Roact.Component:extend("ReplicateUi")

function Ui:init()
    self.state = {
        visible   = true,
        url       = "",
        status    = "Esperando URL…",
        meta      = nil,    -- {owner, building_type, furniture_count, time}
        prog      = 0,
        total     = 1,
        downloading = false,
        replicating = false,
    }

    self.dlConn = DownloadEvent.Event:Connect(function(done,total)
        self:setState{status=string.format("Descargando %d/%d KB…",done,total)}
    end)
    self.repConn = ReplicateEvent.Event:Connect(function(done,total)
        self:setState{
            prog   = done,
            total  = total,
            status = string.format("Replicando %d/%d…",done,total)
        }
    end)
end
function Ui:willUnmount()
    self.dlConn:Disconnect()
    self.repConn:Disconnect()
end

-- util para formatear metadatos (evita error “got table”)
local function metaToString(meta)
    if not meta then return "No dump loaded." end
    return string.format(
        "Owner: %s\nType: %s\nFurniture: %d\nDate: %s",
        tostring(meta.owner or "‑"),
        tostring(meta.building_type or "‑"),
        tonumber(meta.furniture_count or 0),
        os.date("%c", tonumber(meta.time) or 0)
    )
end

function Ui:render()
    local s   = self.state
    local pct = s.prog / math.max(1, s.total)

    return Roact.createElement("ScreenGui",{ResetOnSpawn=false},{ ---------------------------------------------------

        Toggle = Roact.createElement("TextButton",{
            Text="☰", Font=Enum.Font.GothamBold, TextSize=22,
            BackgroundColor3=Color3.fromRGB(50,50,90), TextColor3=Color3.new(1,1,1),
            Size=UDim2.new(0,36,0,36), Position=UDim2.new(0,10,0,56),
            [Roact.Event.Activated]=function() self:setState{visible=not s.visible} end,
        }),

        Window = Roact.createElement("Frame",{
            Visible = s.visible,
            Size     = UDim2.new(0,430,0,250),
            Position = UDim2.new(0,60,0,60),
            BackgroundColor3=Color3.fromRGB(30,30,30), BorderSizePixel=0,
        },{
            Roact.createElement("UICorner",{CornerRadius=UDim.new(0,10)}),

            Title = Roact.createElement("TextLabel",{
                Text="Replicate House (URL)", Font=Enum.Font.GothamBold, TextSize=22,
                BackgroundTransparency=1, TextColor3=Color3.new(1,1,1),
                Size=UDim2.new(1,-20,0,28), Position=UDim2.new(0,10,0,8),
                TextXAlignment=Enum.TextXAlignment.Left,
            }),

            UrlBox = Roact.createElement("TextBox",{
                PlaceholderText="https://…/dump_house_*.json",
                Text=s.url, Font=Enum.Font.Code, TextSize=14, ClearTextOnFocus=false,
                BackgroundColor3=Color3.fromRGB(45,45,60), TextColor3=Color3.new(1,1,1),
                Size=UDim2.new(1,-20,0,28), Position=UDim2.new(0,10,0,38),
                [Roact.Change.Text]=function(r) self:setState{url=r.Text} end,
            },{Roact.createElement("UICorner",{CornerRadius=UDim.new(0,4)})}),

            Status = Roact.createElement("TextLabel",{
                Text=s.status, Font=Enum.Font.Gotham, TextSize=14,
                BackgroundTransparency=1, TextColor3=Color3.fromRGB(200,200,200),
                Size=UDim2.new(1,-20,0,18), Position=UDim2.new(0,10,0,70),
                TextXAlignment=Enum.TextXAlignment.Left,
            }),

            ProgBG = Roact.createElement("Frame",{
                Size=UDim2.new(1,-20,0,10), Position=UDim2.new(0,10,0,90),
                BackgroundColor3=Color3.fromRGB(55,55,55), BorderSizePixel=0,
            },{
                Fill = Roact.createElement("Frame",{
                    Size=UDim2.new(pct,0,1,0),
                    BackgroundColor3=Color3.fromRGB(60,120,200), BorderSizePixel=0,
                })
            }),

            Info = Roact.createElement("TextLabel",{
                Text=metaToString(s.meta), Font=Enum.Font.Gotham, TextSize=14,
                BackgroundColor3=Color3.fromRGB(45,45,45), TextColor3=Color3.new(1,1,1),
                TextXAlignment=Enum.TextXAlignment.Left, TextYAlignment=Enum.TextYAlignment.Top,
                Size=UDim2.new(1,-20,1,-140), Position=UDim2.new(0,10,0,110),
                BorderSizePixel=0,
            },{Roact.createElement("UICorner",{CornerRadius=UDim.new(0,6)})}),

            BtnLoad = Roact.createElement("TextButton",{
                Text=s.downloading and"Loading…" or"Load JSON",
                Font=Enum.Font.GothamBold, TextSize=18,
                BackgroundColor3=Color3.fromRGB(80,150,90), TextColor3=Color3.new(1,1,1),
                Size=UDim2.new(0.48,-12,0,36), Position=UDim2.new(0,10,1,-46),
                AutoButtonColor=not s.downloading,
                [Roact.Event.Activated]=function()
                    if s.downloading then return end
                    local url = s.url
                    if not url:match("^https?://") then
                        self:setState{status="❌ URL no válida."}; return
                    end
                    self:setState{downloading=true,status="Descargando…",prog=0,total=1}
                    task.spawn(function()
                        local ok, body = pcall(httpFetch, url)
                        if not ok then
                            self:setState{status="❌ "..tostring(body),downloading=false}; return
                        end
                        local ok2, dump = pcall(HttpService.JSONDecode,HttpService,body)
                        if not ok2 then
                            self:setState{status="❌ JSON mal formado",downloading=false}; return
                        end
                        self.dumpLoaded = dump
                        local h = dump.house or {}
                        self:setState{
                            downloading=false,
                            status="JSON OK",
                            meta = {
                                owner           = h.player or h.owner or "?",
                                building_type   = h.building_type or "?",
                                furniture_count = dump.furniture_count or #(dump.furniture or {}),
                                time            = dump.time,
                            },
                            prog=0, total=1
                        }
                    end)
                end,
            }),

            BtnRep = Roact.createElement("TextButton",{
                Text=s.replicating and"Replicating…" or"Replicate",
                Font=Enum.Font.GothamBold, TextSize=18,
                BackgroundColor3=Color3.fromRGB(60,120,200), TextColor3=Color3.new(1,1,1),
                Size=UDim2.new(0.48,-12,0,36), Position=UDim2.new(0.52,2,1,-46),
                AutoButtonColor=not s.replicating,
                [Roact.Event.Activated]=function()
                    if self.dumpLoaded and not s.replicating then
                        local total = self.dumpLoaded.furniture_count or #(self.dumpLoaded.furniture or {})
                        self:setState{replicating=true,status="Preparando réplica…",prog=0,total=total}
                        replicateHouse(self.dumpLoaded,function(txt) self:setState{status=txt} end)
                    end
                end,
            }),
        }),
    })
end

Roact.mount(Roact.createElement(Ui), LP:WaitForChild("PlayerGui"))
