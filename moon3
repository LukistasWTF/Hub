-- AutoMinigames Plus v2 ‚Äì FIX ANTI ‚Äúattempt to call a nil value‚Äù
-- Colas correctas, participaci√≥n activa y Anti‚ÄëAFK con logs bonitos. üíñ

-- ==== Corte duro si NO es cliente (evita errores en servidor/linea 1) ====
local RunService = game:GetService("RunService")
if not RunService:IsClient() then return end

-- ==== Servicios base ====
local Players            = game:GetService("Players")
local ReplicatedStorage  = game:GetService("ReplicatedStorage")
local StarterGui         = game:GetService("StarterGui")
local PathfindingService = game:GetService("PathfindingService")
local VirtualUser        = game:GetService("VirtualUser")
local LocalPlayer        = Players.LocalPlayer
if not LocalPlayer then return end

-- ==== Fsys con carga segura ====
local okFsys, Fsys = pcall(require, ReplicatedStorage:WaitForChild("Fsys"))
local FSYS_LOAD = (okFsys and Fsys and type(Fsys.load) == "function") and Fsys.load or nil
local function safeLoad(name)
	if not FSYS_LOAD then return nil end
	local ok, mod = pcall(FSYS_LOAD, name)
	return ok and mod or nil
end

-- ==== M√≥dulos opcionales (no ‚Äúllamar‚Äù si son nil) ====
local LiveOpsTime          = safeLoad("LiveOpsTime")          or { now = function() return os.clock() end }
local UIManager            = safeLoad("UIManager")
local ClientToolManager    = safeLoad("ClientToolManager")    or { now = function() return LiveOpsTime.now() end }
local MinigameClientManager= safeLoad("MinigameClientManager")

-- ==== Config ====
local CONFIG = {
	order = { "joetation", "coconut_bonk" },
	fallbackLength = { joetation = 90, coconut_bonk = 120 },
	actionCadence = { joetation = 1.25, coconut_bonk = 1.5 },
	minCadence = 0.6, maxCadence = 2.5, cadenceStepDown = 0.1, cadenceStepUp = 0.15,
	requeueEvery = 2.0, stuckTimeout = 15,
	moveAggressive = true, moveRadiusStop = 10,
	AFK_ENABLED = true, -- << tu variable "afk"
	screenLogs = true, debugPanel = true, maxLogLines = 18,
}

-- ==== Utils menores ====
local function shallowClone(t)
	local r = {}
	for k,v in pairs(t or {}) do r[k] = v end
	return r
end

-- ==== Debug UI (compacto) ====
local debugGui, debugTextLabel, infoLine
local logBuffer = {}
local function ensureDebugGui()
	if not CONFIG.debugPanel or debugGui then return end
	local sg = Instance.new("ScreenGui")
	sg.Name, sg.ResetOnSpawn, sg.IgnoreGuiInset, sg.DisplayOrder = "AutoMG_Debug", false, true, 1000
	sg.Parent = LocalPlayer:WaitForChild("PlayerGui")

	local frame = Instance.new("Frame")
	frame.Name, frame.Position, frame.Size = "Panel", UDim2.new(0,12,0,12), UDim2.new(0,460,0,320)
	frame.BackgroundColor3, frame.BackgroundTransparency, frame.BorderSizePixel = Color3.fromRGB(20,20,28), 0.15, 0
	frame.Parent = sg
	local corner = Instance.new("UICorner"); corner.CornerRadius = UDim.new(0,12); corner.Parent = frame

	local title = Instance.new("TextLabel")
	title.Size, title.Position = UDim2.new(1,-16,0,28), UDim2.new(0,8,0,8)
	title.BackgroundTransparency, title.TextXAlignment = 1, Enum.TextXAlignment.Left
	title.Font, title.TextSize, title.Text, title.TextColor3 = Enum.Font.GothamBold, 18, "ü§ñ AutoMinigames Plus v2", Color3.fromRGB(255,255,255)
	title.Parent = frame

	local info = Instance.new("TextLabel")
	info.Name, info.Size, info.Position = "Info", UDim2.new(1,-16,0,18), UDim2.new(0,8,0,36)
	info.BackgroundTransparency, info.TextXAlignment = 1, Enum.TextXAlignment.Left
	info.Font, info.TextSize, info.Text, info.TextColor3 = Enum.Font.Code, 14, "‚Äî", Color3.fromRGB(255,240,180)
	info.Parent = frame; infoLine = info

	local box = Instance.new("TextLabel")
	box.Name, box.Size, box.Position = "Log", UDim2.new(1,-16,1,-64), UDim2.new(0,8,0,58)
	box.BackgroundTransparency, box.TextXAlignment, box.TextYAlignment = 1, Enum.TextXAlignment.Left, Enum.TextYAlignment.Top
	box.Font, box.TextSize, box.Text, box.TextColor3 = Enum.Font.Code, 15, "", Color3.fromRGB(220,235,255)
	box.Parent = frame; debugGui, debugTextLabel = sg, box
end

local function nowText() return os.date("%Y-%m-%d %H:%M:%S") end
local function pushLog(line)
	if not (CONFIG.debugPanel and debugTextLabel) then return end
	table.insert(logBuffer, line); while #logBuffer > CONFIG.maxLogLines do table.remove(logBuffer,1) end
	debugTextLabel.Text = table.concat(logBuffer, "\n")
end
local function notify(text)
	if UIManager and CONFIG.screenLogs and UIManager.apps and UIManager.apps.HintApp then
		pcall(function() UIManager.apps.HintApp:hint({text=text; length=2.8; color=Color3.fromRGB(235,255,180); overridable=true}) end)
	else
		pcall(function() StarterGui:SetCore("SendNotification", {Title="AutoMG"; Text=text; Duration=3}) end)
	end
end
local function LOG(tag, icon, msg)
	local line = string.format("[%s][%s %s] %s", nowText(), tag, icon, msg)
	print(line); pushLog(line); if CONFIG.screenLogs then notify(icon.." "..msg) end
end
local function fmtTime(s) s=math.max(0,math.floor(s)); return string.format("%02d:%02d", math.floor(s/60), s%60) end

-- ==== Helpers MG ====
local function getClient(id)
	if not MinigameClientManager then return nil end
	local ok, cli = pcall(function() return MinigameClientManager.get(id) end)
	return ok and cli or nil
end
local function getMGLength(cli, id)
	local len = (CONFIG.fallbackLength and CONFIG.fallbackLength[id]) or 90
	pcall(function() if cli and cli.minigame_length then len = cli.minigame_length end end)
	return len
end
local function hrp()
	local c = LocalPlayer.Character; return c and c:FindFirstChild("HumanoidRootPart")
end
local function humanoid()
	local c = LocalPlayer.Character; return c and c:FindFirstChildWhichIsA("Humanoid")
end

-- ==== Estado ====
local lastQueueTry, lastActivity, lastActionAt, playing, mgEndsAt = {}, {}, {}, {}, {}
local currentGame = nil
local dynCadence = shallowClone(CONFIG.actionCadence or {})
local actionsCount, windowStart = {}, LiveOpsTime.now()
local function updInfoLine()
	if not infoLine then return end
	local parts = {}
	for _, id in ipairs(CONFIG.order) do
		local apm, elapsed = 0, math.max(1, LiveOpsTime.now() - windowStart)
		if actionsCount[id] then apm = math.floor(actionsCount[id]*60/elapsed) end
		table.insert(parts, string.format("%s: APM %d | cad %.2fs %s", id, apm, dynCadence[id] or 0, (playing[id] and "üéÆ" or "‚è∏Ô∏è")))
	end
	infoLine.Text = table.concat(parts, "  ‚Ä¢  ")
end
local function markActivity(id) lastActivity[id] = LiveOpsTime.now(); updInfoLine() end
local function canAct(id)
	local cad = dynCadence[id] or (CONFIG.actionCadence and CONFIG.actionCadence[id]) or 2.0
	local t = LiveOpsTime.now()
	if not lastActionAt[id] or (t - lastActionAt[id]) >= cad then lastActionAt[id] = t; return true end
	return false
end
local function adjustCadence(id, hadActivity)
	local cad = dynCadence[id] or (CONFIG.actionCadence and CONFIG.actionCadence[id]) or 2.0
	if hadActivity then cad = math.max(CONFIG.minCadence, cad - CONFIG.cadenceStepDown)
	else cad = math.min(CONFIG.maxCadence, cad + CONFIG.cadenceStepUp) end
	dynCadence[id] = cad; updInfoLine()
end

-- ==== Colas ====
local leaveRoutes = { "leave_queue", "cancel_queue", "cancel_join", "leave_persistent_game" }
local function leaveQueue(id, cli)
	cli = cli or getClient(id); if not cli then return false end
	for _, r in ipairs(leaveRoutes) do
		local ok = pcall(function() return cli:message_server(r) end)
		if ok then LOG(id,"üö™","Saliendo de cola ("..r..")."); return true end
	end
	return false
end
local function ensureQueued(id, force)
	if currentGame ~= nil then return end
	local t = LiveOpsTime.now()
	if not force and lastQueueTry[id] and (t - lastQueueTry[id]) < CONFIG.requeueEvery then return end
	lastQueueTry[id] = t
	local cli = getClient(id); if not cli then LOG(id,"‚ùå","Cliente no encontrado; reintento."); return end
	if cli.is_participating or cli.is_in_interior then return end
	local okJoin = false
	if cli.join_persistent_game then okJoin = pcall(function() cli:join_persistent_game() end) end
	if (not okJoin) and cli.message_server then okJoin = pcall(function() cli:message_server("join_queue") end) end
	if okJoin then LOG(id,"üïí","Intentando entrar a cola‚Ä¶") else LOG(id,"‚ö†Ô∏è","Fallo al entrar a cola.") end
end
local function joinAllQueues(force) if currentGame ~= nil then return end; for _, id in ipairs(CONFIG.order) do ensureQueued(id, force) end end
local function leaveAllQueuesExcept(keepId) for _, id in ipairs(CONFIG.order) do if id ~= keepId then leaveQueue(id) end end end

-- ==== Movimiento opcional ====
local function moveTo(target)
	if not CONFIG.moveAggressive then return end
	local hum, root = humanoid(), hrp(); if not (hum and root) then return end
	if (root.Position - target).Magnitude <= CONFIG.moveRadiusStop then return end
	local path = PathfindingService:CreatePath()
	local ok = pcall(function() path:ComputeAsync(root.Position, target) end)
	if not ok or path.Status ~= Enum.PathStatus.Success then hum:MoveTo(target); return end
	for _, wp in ipairs(path:GetWaypoints()) do hum:MoveTo(wp.Position) end
end

-- ==== Acciones MG ====
local function act_joetation(cli)
	if not canAct("joetation") then return end
	local tBefore = LiveOpsTime.now()
	local pos = (hrp() and hrp().Position) or Vector3.new(0,0,0)
	if cli.pickup_pile_position then moveTo(cli.pickup_pile_position) end
	local ok1 = pcall(function() return cli:message_server("pickup_holdable_from_pile", pos, (ClientToolManager.now and ClientToolManager.now() or LiveOpsTime.now())) end)
	local cannonIndex = math.random(1, 12)
	if cli.cannons_world and #cli.cannons_world > 0 then
		local me, best, bestIdx = pos
		for i, p in ipairs(cli.cannons_world) do
			local d = (p - me).Magnitude; if not best or d < best then best, bestIdx = d, i end
		end
		if bestIdx then cannonIndex = bestIdx end
	end
	local ok2 = pcall(function() return cli:message_server("use_cannon", cannonIndex, pos, (ClientToolManager.now and ClientToolManager.now() or LiveOpsTime.now())) end)
	actionsCount.joetation = (actionsCount.joetation or 0) + 1
	LOG("joetation","üéØ","Disparo con ca√±√≥n #"..tostring(cannonIndex))
	task.delay(0.25, function() adjustCadence("joetation", (LiveOpsTime.now()-tBefore)<2.5 and (ok1 or ok2)) end)
	markActivity("joetation")
end

local function act_coconut(cli)
	if not canAct("coconut_bonk") then return end
	local tBefore = LiveOpsTime.now()
	pcall(function() cli:message_server("pickup_droppable", 1) end)
	local me = (hrp() and hrp().Position) or Vector3.new(0,0,0)
	local bestUid, bestScore = nil, -1
	if cli.ships_by_uid then
		for uid, ship in pairs(cli.ships_by_uid) do
			local hp, p = 1, nil
			pcall(function()
				if ship.ship_data and ship.ship_data.health then hp = ship.ship_data.health end
				if ship.base and ship.base.PrimaryPart then p = ship.base.PrimaryPart.Position end
			end)
			local dist = p and (p - me).Magnitude or 1000
			local score = hp - dist*0.02
			if score > bestScore then bestScore, bestUid = score, uid end
		end
	end
	if bestUid then
		local ok = pcall(function() return cli:message_server("used_droppable", bestUid) end)
		actionsCount.coconut_bonk = (actionsCount.coconut_bonk or 0) + 1
		LOG("coconut_bonk","ü••","Lanzado al barco "..tostring(bestUid))
		task.delay(0.25, function() adjustCadence("coconut_bonk", (LiveOpsTime.now()-tBefore)<2.5 and ok) end)
		markActivity("coconut_bonk")
	end
end

-- ==== Recompensas ====
local rewardRoutes = { "claim_rewards","collect_rewards","request_rewards","request_reward_payout","claim_payout","claim_xp" }
local function tryClaimRewards(id, cli)
	for _, route in ipairs(rewardRoutes) do
		local ok = pcall(function() return cli:message_server(route) end)
		if ok then LOG(id,"üèÜ","Recompensas ("..route..")"); return end
	end
	if cli.ingame_app_controller then
		for _, m in ipairs({"claimRewards","ClaimRewards","Finish","finish","Complete","complete"}) do
			local f = cli.ingame_app_controller[m]
			if typeof(f)=="function" then if pcall(function() f(cli.ingame_app_controller) end) then LOG(id,"üèÜ","Recompensas via controller ("..m..")"); return end end
		end
	end
end

-- ==== Se√±ales Lifecycle ====
local function onGameStarted(id, cli)
	local len = getMGLength(cli, id)
	playing[id], currentGame = true, id
	mgEndsAt[id] = LiveOpsTime.now() + len
	actionsCount[id], windowStart = 0, LiveOpsTime.now()
	leaveAllQueuesExcept(id)
	LOG(id,"üöÄ","¬°Partida! ‚è±Ô∏è "..fmtTime(len).." restantes.")
end
local function onGameEnded(id, cli)
	playing[id] = false; if currentGame == id then currentGame = nil end; mgEndsAt[id] = nil
	LOG(id,"üèÅ","Fin. Reclamando‚Ä¶"); tryClaimRewards(id, cli)
	LOG(id,"üîÅ","Entrando a TODAS las colas."); joinAllQueues(true)
end
local function wireSignals(id, cli)
	if cli.minigame_state and cli.minigame_state.get_property_changed_signal then
		pcall(function()
			cli.minigame_state:get_property_changed_signal("is_game_active"):Connect(function(isActive)
				if isActive then onGameStarted(id, cli) else onGameEnded(id, cli) end
			end)
		end)
	end
	pcall(function() local s = cli.game_end_signal; if s and s.Connect then s:Connect(function() onGameEnded(id, cli) end) end end)
end

-- ==== Anti‚ÄëAFK (afk) ====
local AFK = { enabled = CONFIG.AFK_ENABLED, connections = {}, lastWiggle = 0 }
local function enableAntiAFK()
	if not AFK.enabled or #AFK.connections > 0 then return end
	LOG("afk","üõ°Ô∏è","Anti‚ÄëAFK ACTIVADO.")
	table.insert(AFK.connections, LocalPlayer.Idled:Connect(function()
		VirtualUser:CaptureController(); VirtualUser:ClickButton2(Vector2.new(0,0))
		LOG("afk","üñ±Ô∏è","Ping anti‚Äëidle.")
	end))
	table.insert(AFK.connections, RunService.Heartbeat:Connect(function()
		local t = LiveOpsTime.now()
		if t - AFK.lastWiggle > 30 then
			local r = hrp(); if r then r.CFrame = r.CFrame * CFrame.Angles(0, math.rad(1), 0) end
			AFK.lastWiggle = t; LOG("afk","üéÆ","Wiggle sutil.")
		end
	end))
end
local function disableAntiAFK()
	for _, c in ipairs(AFK.connections) do pcall(function() c:Disconnect() end) end
	AFK.connections = {}; LOG("afk","üõë","Anti‚ÄëAFK DESACTIVADO.")
end

-- ==== Arranque ====
ensureDebugGui()
if AFK.enabled then enableAntiAFK() end
LOG("init","‚ú®","AutoMinigames Plus v2 iniciado.")
LOG("init","üîÅ","Rotaci√≥n: "..table.concat(CONFIG.order, " ‚Üí "))
LOG("init","üèÜ","Modo participaci√≥n m√°xima activo.")

task.defer(function() for _, id in ipairs(CONFIG.order) do local cli = getClient(id); if cli then wireSignals(id, cli) end end end)

task.spawn(function()
	while true do
		for _, id in ipairs(CONFIG.order) do
			local cli = getClient(id)
			if currentGame == nil then ensureQueued(id) end

			local last = lastActivity[id]
			if last and (LiveOpsTime.now() - last) > CONFIG.stuckTimeout then
				LOG(id,"üîÑ","Watchdog: sin actividad, re‚Äëqueue.")
				lastActivity[id] = LiveOpsTime.now(); if currentGame == nil then ensureQueued(id, true) end
			end

			if cli and cli.is_participating then
				if currentGame ~= id or not playing[id] then onGameStarted(id, cli) end
				if id == "joetation" then act_joetation(cli)
				elseif id == "coconut_bonk" then act_coconut(cli)
				else pcall(function() cli:message_server("heartbeat") end); LOG(id,"üéÆ","Ping gen√©rico.") end
				markActivity(id)
			end

			local eta = mgEndsAt[id]
			if eta then
				local rem = math.max(0, math.floor(eta - LiveOpsTime.now()))
				if rem % 5 == 0 then LOG(id,"‚è≥","Tiempo restante: "..string.format("%02d:%02d", math.floor(rem/60), rem%60)) end
				if rem == 0 and cli and cli.is_participating then tryClaimRewards(id, cli); mgEndsAt[id] = nil end
			end
		end
		task.wait(0.25)
	end
end)

LocalPlayer.CharacterAdded:Connect(function()
	LOG("player","üßç","Character listo; reanudando.")
	for _, id in ipairs(CONFIG.order) do lastActivity[id] = LiveOpsTime.now() end
end)

task.spawn(function()
	while true do
		for _, id in ipairs(CONFIG.order) do local cli = getClient(id); if cli then wireSignals(id, cli) end end
		task.wait(10)
	end
end)

pcall(function()
	LocalPlayer.Chatted:Connect(function(msg)
		if msg == "!automg panel" and debugGui then
			debugGui.Enabled = not debugGui.Enabled; LOG("ui","üñ•Ô∏è","Panel "..(debugGui.Enabled and "activado" or "oculto")..".")
		elseif msg == "!automg afk on" then AFK.enabled = true; enableAntiAFK()
		elseif msg == "!automg afk off" then AFK.enabled = false; disableAntiAFK()
		elseif msg:match("^!automg move ") then CONFIG.moveAggressive = (msg:sub(13):lower() == "on"); LOG("ui","üß≠","Reposicionamiento "..(CONFIG.moveAggressive and "ON" or "OFF"))
		end
	end)
end)
