-- Cargar dependencias
local Fsys = require(game.ReplicatedStorage:WaitForChild("Fsys")).load
local RouterClient = Fsys("RouterClient")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Crear la interfaz de usuario usando Kavo-UI-Library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Teleport Hub", "Serpent")

-- Crear una pestaña principal
local Main = Window:NewTab("Main")
local MainSection = Main:NewSection("Teleportation")

-- Variable para almacenar el nombre del jugador y la ubicación seleccionada
local selectedPlayer = ""
local selectedLocation = ""
local comboMode = false  -- Variable para activar/desactivar el modo combo

-- Lista de ubicaciones predefinidas
local locationsList = {
    "AutoShop",
    "BabyShop",
    "Nursery",
    "HatShop",
    "Supermarket",
    "ToyShop",
    "MainMap/Default",
    "IceCream",
    "CoffeeShop",
    "Cave",
    "CampingShop",
    "SafetyHub",
    "BeachShop",
    "PetShop",
    "Hospital"
}

-- Crear una lista desplegable (combobox) con los jugadores en el servidor
local playersList = {}
local playerDropdown = MainSection:NewDropdown("Select Player", "Select a player to teleport to", playersList, function(value)
    selectedPlayer = value
end)

-- Función para actualizar la lista de jugadores
local function updatePlayersList()
    playersList = {}
    for _, player in pairs(Players:GetPlayers()) do
        table.insert(playersList, player.Name)
    end
    playerDropdown:Refresh(playersList)
end

-- Actualizar la lista de jugadores cada 5 segundos
spawn(function()
    while true do
        updatePlayersList()
        wait(5)
    end
end)

-- Crear una lista desplegable (combobox) con las localizaciones
local locationDropdown = MainSection:NewDropdown("Select Location", "Select a location to teleport to", locationsList, function(value)
    selectedLocation = value
end)

-- Función para teletransportarse a un jugador
local function teletransportarse()
    if selectedPlayer == "" then
        warn("<No player name entered>")
        return
    end
    
    local player = Players:FindFirstChild(selectedPlayer)
    if player then
        -- Teletransportarse si el jugador está en el mismo servidor
        RouterClient.get("LocationAPI/TeleToPlayer"):InvokeServer(player)
    else
        -- Teletransportarse si el jugador está en un servidor diferente
        RouterClient.get("LocationAPI/TeleToPlayerInDifferentServer"):FireServer(selectedPlayer)
    end
end

-- Crear un botón para teletransportarse a un jugador
MainSection:NewButton("Teleport to Player", "Teleport to the specified player", function()
    teletransportarse()
end)

-- Función para teletransportarse a una localización
local function teletransportarseALocalizacion()
    if selectedLocation == "" then
        warn("<No location selected>")
        return
    end

    local args = {
        [1] = "Interiors",
        [2] = selectedLocation
    }

    RouterClient.get("LocationAPI/SetLocation"):InvokeServer(unpack(args))
end

-- Crear un botón para teletransportarse a una localización
MainSection:NewButton("Teleport to Location", "Teleport to the specified location", function()
    teletransportarseALocalizacion()
end)

-- Función para enviar un tradeo
local function enviarTradeo()
    if selectedPlayer == "" then
        warn("<No player name entered>")
        return
    end

    local player = Players:FindFirstChild(selectedPlayer)
    if player then
        RouterClient.get("TradeAPI/SendTradeRequest"):FireServer(player)
    else
        warn("Player not found in the server")
    end
end

-- Crear un botón para enviar un tradeo
MainSection:NewButton("Send Trade", "Send a trade request to the specified player", function()
    enviarTradeo()
end)

-- Función para observar tradeo
local function observarTradeo()
    if selectedPlayer == "" then
        warn("<No player name entered>")
        return
    end

    local player = Players:FindFirstChild(selectedPlayer)
    if player then
        RouterClient.get("TradeAPI/SpectateTrade"):FireServer(true, player)
    else
        warn("Player not found in the server")
    end
end

-- Crear un botón para observar un tradeo
MainSection:NewButton("Observe Trade", "Observe the trade of the specified player", function()
    observarTradeo()
end)

-- Función para ver el perfil del jugador
local function verPerfil()
    if selectedPlayer == "" then
        warn("<No player name entered>")
        return
    end

    local player = Players:FindFirstChild(selectedPlayer)
    if player then
        -- Abrir perfil
        local args = {
            [1] = "opened",
            [2] = {
                ["profile_owner_user_id"] = player.UserId,
                ["profile_type"] = "stranger"  -- Puedes ajustar este valor según sea necesario
            }
        }
        RouterClient.get("PlayerProfileAPI/SendPlayerLog"):FireServer(unpack(args))
    else
        warn("Player not found in the server")
    end
end

-- Crear un botón para ver el perfil
MainSection:NewButton("View Profile", "View the profile of the specified player", function()
    verPerfil()
end)

-- Función para silenciar/activar sonido de un jugador
local function silenciarActivarSonido()
    if selectedPlayer == "" then
        warn("<No player name entered>")
        return
    end

    local player = Players:FindFirstChild(selectedPlayer)
    if player then
        if RouterClient.get("MuteAPI/IsMuted"):InvokeServer(player) then
            RouterClient.get("MuteAPI/UnmutePlayer"):FireServer(player)
        else
            RouterClient.get("MuteAPI/MutePlayer"):FireServer(player)
        end
    else
        warn("Player not found in the server")
    end
end

-- Crear un botón para silenciar/activar sonido
MainSection:NewButton("Toggle Mute", "Toggle mute for the specified player", function()
    silenciarActivarSonido()
end)

-- Función para dar un artículo al jugador
local function darArticulo(fromHand)
    if selectedPlayer == "" then
        warn("<No player name entered>")
        return
    end

    local player = Players:FindFirstChild(selectedPlayer)
    if player then
        local item = fromHand and "hand_item_id" or "inventory_item_id" -- Reemplazar con lógica real para obtener el artículo
        RouterClient.get("TradeAPI/GiveItem"):InvokeServer(player, item)
    else
        warn("Player not found in the server")
    end
end

-- Crear botones para dar artículo desde la mano o inventario
MainSection:NewButton("Give Item (Hand)", "Give an item from your hand to the specified player", function()
    darArticulo(true)
end)

MainSection:NewButton("Give Item (Inventory)", "Give an item from your inventory to the specified player", function()
    darArticulo(false)
end)

-- Función para romper todos los globos
local function breakAllBalloons()
    for _, balloon in pairs(workspace.Balloons:GetChildren()) do
        if balloon:IsA("Part") then
            balloon:Destroy()
        end
    end
    print("All balloons destroyed!")
end

-- Función para activar el combo de globos
local function comboBalloons()
    while comboMode do
        local args = {
            [1] = "balloon_pop_minigame",
            [2] = "dropped_combo"
        }
        ReplicatedStorage.Remotes.BalloonPop:FireServer(unpack(args))
        wait(0.1)  -- Ajusta el tiempo de espera según sea necesario
    end
end

-- Crear un botón para romper todos los globos
MainSection:NewButton("Break All Balloons", "Break all balloons", function()
    breakAllBalloons()
end)

-- Crear un checkbox para activar/desactivar el modo combo
MainSection:NewToggle("Combo Mode", "Toggle combo mode for balloons", function(state)
    comboMode = state
    if comboMode then
        spawn(comboBalloons)
    end
end)

-- Añadir la nueva pestaña y sección para Pink Heart Glasses
local ShopTab = Window:NewTab("Shop")
local PinkHeartGlassesSection = ShopTab:NewSection("Pink Heart Glasses")

-- Variable para almacenar la cantidad
local purchaseAmount = 1

-- Crear un campo de entrada para la cantidad
PinkHeartGlassesSection:NewTextBox("Amount", "Enter the amount to purchase", function(value)
    purchaseAmount = tonumber(value) or 1
end)

-- Función para intentar comprar el ítem Pink Heart Glasses
local function attemptPurchase(category, itemId)
    local args = {category, itemId, {}}
    local success, result = pcall(function()
        return RouterClient.get("ShopAPI/BuyItem"):InvokeServer(unpack(args))
    end)
    
    if success then
        if result == "too little money" then
            print(string.format("No tienes suficiente dinero para comprar %s (ID: %s), pero se puede comprar.", category, itemId))
        elseif result == "not for sale" then
            print(string.format("El ítem %s (ID: %s) no está a la venta.", category, itemId))
        else
            print(string.format("Intento de compra de %s (ID: %s) resultó: %s", category, itemId, result))
        end
    else
        print(string.format("Error al intentar comprar %s (ID: %s): %s", category, itemId, tostring(result)))
    end
end

-- Crear un botón para iniciar la compra automática
PinkHeartGlassesSection:NewButton("Auto-Comprar", "Auto-buy Pink Heart Glasses", function()
    for i = 1, purchaseAmount do
        attemptPurchase("pet_accessories", "pink_heart_glasses")
    end
end)

-- Añadir la nueva categoría Stats
local StatsSection = ShopTab:NewSection("Stats")

-- Variable para almacenar la cantidad ingresada y calculada
local inputAmount = 0
local calculatedAmount = 0

-- Crear un campo de entrada para la cantidad
StatsSection:NewTextBox("Cantidad", "Enter a quantity", function(value)
    inputAmount = tonumber(value) or 0
end)

-- Función para calcular la cantidad disponible
local function calcularCantidad()
    calculatedAmount = math.floor(inputAmount / 500)
    local cantidadLabel = StatsSection:NewLabel("Cantidad disponible: " .. calculatedAmount)
    spawn(function()
        wait(5)
        cantidadLabel:Remove()
    end)
end

-- Crear un botón para calcular la cantidad
StatsSection:NewButton("Calcular", "Calculate available quantity", function()
    calcularCantidad()
end)

-- Función para intentar comprar la cantidad calculada
local function comprarCantidadCalculada()
    for i = 1, calculatedAmount do
        attemptPurchase("pet_accessories", "pink_heart_glasses")
    end
end

-- Crear un botón para comprar la cantidad calculada
StatsSection:NewButton("Comprar", "Buy calculated quantity", function()
    comprarCantidadCalculada()
end)
