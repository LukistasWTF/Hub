--═════════════════════════════════════════════════════════════════════
-- ReplicateHouseFromURL_v9.lua  (World-first agnostic + basis_v3)
--  • Requiere JSON con format.version='v9' y space='agnostic_world_first'
--  • Usa world_cf (preferente). Si no hay, reconstruye desde root_local_cf.
--  • Conserva roll (basis_v3). Escala + colores exactos.
--  • Auto-detect WORLD/LOCAL y reintenta por ítem.
--  • Escáner de remotos para Textures/Furnitures (no cuelga).
--═════════════════════════════════════════════════════════════════════

------------------------------ Ajustes
local WAIT_EACH_FURNI   = 0.07
local RETRIES_PER_ITEM  = 2
local WAIT_TEXTURE      = 0.05
local EPS_DETECT        = 1e-3
local SCAN_WINDOW_SEC   = 10
local SCAN_STEP_SEC     = 0.25
local APPLY_TEXTURES    = true

------------------------------ Servicios
local RS          = game:GetService("ReplicatedStorage")
local Players     = game:GetService("Players")
local LP          = Players.LocalPlayer
local HttpService = game:GetService("HttpService")

------------------------------ Fsys + fallback
local function requireDeep(name)
    local inst = RS:FindFirstChild(name, true)
    if inst and inst:IsA("ModuleScript") then local ok,m=pcall(require,inst); if ok and m~=nil then return m end end
end
local Fsys do local ok,obj=pcall(function() return RS:WaitForChild("Fsys",2) end); if ok and obj then pcall(function() Fsys=require(obj) end) end
local function FsLoad(name)
    if Fsys and type(Fsys.load)=="function" then
        local ok,m=pcall(Fsys.load,name); if ok and m~=nil then return m end
        local ok2,m2=pcall(Fsys.load,Fsys,name); if ok2 and m2~=nil then return m2 end
    end
    local m=requireDeep(name); if m~=nil then return m end
    error(("[ReplicateV9] No se pudo cargar módulo '%s'"):format(tostring(name)))
end

------------------------------ Módulos
local Roact      = FsLoad("Roact")
local InteriorsM = (pcall(FsLoad,"InteriorsM") and FsLoad("InteriorsM")) or nil
local ClientData = (pcall(FsLoad,"ClientData") and FsLoad("ClientData")) or nil
local HouseClient= (pcall(FsLoad,"HouseClient") and FsLoad("HouseClient")) or {is_edit_mode_active=function() return true end}
local FurnitureModelTracker = (pcall(FsLoad,"FurnitureModelTracker") and FsLoad("FurnitureModelTracker")) or nil

------------------------------ HTTP
local proxyRF
local function getProxy() if proxyRF then return proxyRF end
    proxyRF=Instance.new("RemoteFunction"); proxyRF.Name="__ReplicateHttpProxy"; proxyRF.Parent=RS
    proxyRF.OnServerInvoke=function(_,url) local ok,res=pcall(HttpService.GetAsync,HttpService,url,false); return ok, ok and res or tostring(res) end
    return proxyRF
end
local function httpFetch(url)
    local req=(syn and syn.request) or (http and http.request) or request
    if req then local r=req{Url=url,Method="GET"}; if r and r.StatusCode==200 then return r.Body end end
    if game.HttpGet then local ok,b=pcall(game.HttpGet,game,url); if ok then return b end end
    local ok,res=getProxy():InvokeServer(url); if ok then return res end; error(res)
end

------------------------------ Reconstrucción tipos
local function cf_from_basis_v3(t)
    local p=Vector3.new(t.pos[1],t.pos[2],t.pos[3])
    local r=Vector3.new(t.right[1],t.right[2],t.right[3])
    local u=Vector3.new(t.up[1],t.up[2],t.up[3])
    return CFrame.fromMatrix(p,r,u)
end
local function toCF(v)
    if typeof(v)=="CFrame" then return v end
    if type(v)=="table" and v.__type=="CFrame" then
        if v.pos and v.right and v.up then return cf_from_basis_v3(v) end
        if v.pos and v.look then   -- compat
            local p=Vector3.new(v.pos[1],v.pos[2],v.pos[3])
            local look=Vector3.new(v.look[1],v.look[2],v.look[3])
            local z=-look.Unit; local x=Vector3.yAxis:Cross(z); if x.Magnitude<1e-6 then x=Vector3.xAxis end
            x=x.Unit; local y=z:Cross(x).Unit; return CFrame.fromMatrix(p,x,y)
        end
    end
    return CFrame.new()
end
local function toV3(v)
    if typeof(v)=="Vector3" then return v end
    if type(v)=="number" then return Vector3.new(v,v,v) end
    if type(v)=="table" then
        if v.__type=="Vector3" then return Vector3.new(v.x or v[1] or 0, v.y or v[2] or 0, v.z or v[3] or 0) end
        if v[1] and v[2] and v[3] then return Vector3.new(v[1],v[2],v[3]) end
    end
end
local function c3(t)
    if typeof(t)=="Color3" then return t end
    if type(t)=="table" and t.__type=="Color3" then
        local r,g,b=tonumber(t.r) or 0, tonumber(t.g) or 0, tonumber(t.b) or 0
        if r>1 or g>1 or b>1 then r/=255; g/=255; b/=255 end
        return Color3.new(r,g,b)
    end
    if type(t)=="table" and t.hex then
        local n=tonumber(t.hex,16) or 0
        return Color3.fromRGB(math.floor(n/65536)%256, math.floor(n/256)%256, n%256)
    end
end
local function normalizeKey(k) if type(k)=="number" then return k end; if type(k)=="string" then local n=tonumber(k); if n then return n end; return k end; return tostring(k) end
local function toColors(tbl)
    if not tbl then return nil end
    if typeof(tbl)=="Color3" then return {tbl} end
    local out={}; for k,v in pairs(tbl) do local col=c3(v); if col then out[normalizeKey(k)]=col end end
    return next(out) and out or nil
end

------------------------------ Interior root
local function tryCall(mod,fn,...) if not mod then return end local f=mod[fn]; if type(f)~="function" then return end local ok,res=pcall(f,...); if ok then return res end end
local function getPivotCF(inst)
    if not inst then return CFrame.new() end
    if inst:IsA("Model") then local ok,cf=pcall(inst.GetPivot,inst); if ok then return cf end end
    if inst:IsA("BasePart") then return inst.CFrame end
    return CFrame.new()
end
local function getInteriorModel()
    local loc=tryCall(InteriorsM,"get_current_location")
    if type(loc)=="table" then
        if typeof(loc.model)=="Instance"    then return loc.model end
        if typeof(loc.container)=="Instance" then return loc.container end
    end
end

------------------------------ Detección espacio (world/local)
local function detect_server_space(rootCF)
    local interior = tryCall(ClientData,"get","house_interior")
    if not (interior and interior.furniture) or not FurnitureModelTracker then return "world" end
    for unique,data in pairs(interior.furniture) do
        if data and data.cframe then
            local mdl = FurnitureModelTracker.get_furniture_by_unique(unique)
            if mdl then
                local mcf = getPivotCF(mdl)
                local asWorld = toCF(data.cframe)                 -- si ya fuese world
                local asLocalToWorld = rootCF:ToWorldSpace(asWorld) -- si fuese local respecto al root
                local d1=(mcf.Position - asWorld.Position).Magnitude
                local d2=(mcf.Position - asLocalToWorld.Position).Magnitude
                if d1<EPS_DETECT and d1<=d2 then return "world" end
                if d2<EPS_DETECT and d2< d1 then return "local" end
            end
        end
    end
    return "world"
end

------------------------------ Escáner de remotos
local TEXTURE_KEYS   = {"BuyTextures","BuyTexture","ApplyTexture","SetRoomTexture","ApplyRoomMaterial","SetTexture"}
local FURNITURE_KEYS = {"BuyFurnitures","BuyFurniture","PlaceFurniture","PlaceFurnitures","SpawnFurniture","PlaceItem","PlaceHousingItem"}
local function matchAny(s,arr) s=s:lower(); for _,w in ipairs(arr) do if s:find(w:lower(),1,true) then return true end end end
local function objPath(o) local t={}; local cur=o; while cur and cur~=game do table.insert(t,1,cur.Name); cur=cur.Parent end; return table.concat(t,"/") end
local function scanRemote(kind)
    local keys=(kind=="textures") and TEXTURE_KEYS or FURNITURE_KEYS
    local best
    for _,inst in ipairs(game:GetDescendants()) do
        if inst:IsA("RemoteEvent") or inst:IsA("RemoteFunction") then
            local full=objPath(inst)
            if matchAny(inst.Name,keys) or matchAny(full,keys) then
                if full:lower():find("hous") or full:lower():find("interior") then return inst end
                best = best or inst
            end
        end
    end
    return best
end
local function waitForRemotes(deadline)
    local tr,fr
    repeat tr=scanRemote("textures"); fr=scanRemote("furnitures"); if tr or fr then break end; task.wait(SCAN_STEP_SEC)
    until os.clock()>deadline
    if tr then print("[ReplicateV9] Textures remote:",objPath(tr)) end
    if fr then print("[ReplicateV9] Furnitures remote:",objPath(fr)) end
    return tr,fr
end
local function sendTexture(remote, roomId, typ, texId)
    if not remote then return false,"no textures remote" end
    if remote:IsA("RemoteFunction") then
        local ok = pcall(remote.InvokeServer,remote,roomId,typ,texId); if ok then return true end
        ok = pcall(remote.InvokeServer,remote,{roomId=roomId,type=typ,textureId=texId}); if ok then return true end
        ok = pcall(remote.InvokeServer,remote,{room=roomId,texType=typ,texId=texId}); if ok then return true end
        return false,"invoke failed"
    else
        local ok = pcall(remote.FireServer,remote,roomId,typ,texId); if ok then return true end
        ok = pcall(remote.FireServer,remote,{roomId=roomId,type=typ,textureId=texId}); if ok then return true end
        ok = pcall(remote.FireServer,remote,{room=roomId,texType=typ,texId=texId}); if ok then return true end
        return false,"fire failed"
    end
end
local function placeOne(remote, kind, props)
    if not remote then return false,"no furnitures remote" end
    local payloads = {
        { { kind=kind, properties=props } },
        { kind=kind, properties=props },
        { items={ {kind=kind, properties=props} } },
    }
    if remote:IsA("RemoteFunction") then
        for _,p in ipairs(payloads) do
            local ok,res=pcall(remote.InvokeServer,remote,p)
            if ok then if type(res)=="table" and res.success==false then return false,tostring(res.status or "failed") end return true end
        end
        return false,"invoke failed"
    else
        for _,p in ipairs(payloads) do local ok=pcall(remote.FireServer,remote,p); if ok then return true end end
        return false,"fire failed"
    end
end

------------------------------ UI eventos
local ReplicateEvent = Instance.new("BindableEvent")
local DoneEvent      = Instance.new("BindableEvent")

------------------------------ Replicación
local function replicateHouse(dump, setStatus)
    task.spawn(function()
        local fmt=dump.format or {}
        if not (fmt.version=="v9" and (fmt.space=="agnostic_world_first")) then
            setStatus("❌ JSON debe ser adoptx_house_v9 (space='agnostic_world_first')."); DoneEvent:Fire(); return
        end

        -- Edit mode (manual)
        local t0=os.clock()
        while true do
            local ok,on = pcall(HouseClient.is_edit_mode_active, HouseClient)
            if ok and on then break end
            if os.clock()-t0>15 then setStatus("❌ No se pudo entrar en modo edición."); DoneEvent:Fire(); return end
            setStatus("Pulsa *Edit House*…"); task.wait(0.2)
        end
        setStatus("✓ Edit mode detectado")

        -- Root actual (por si hay que convertir root_local → world)
        local rootM = getInteriorModel()
        local rootCF= getPivotCF(rootM)

        -- Detección de espacio del servidor
        local serverSpace = detect_server_space(rootCF)
        print("[ReplicateV9] serverSpace = "..serverSpace)

        -- Remotos
        setStatus("Buscando remotos…")
        local texturesRemote, furnituresRemote = waitForRemotes(os.clock()+SCAN_WINDOW_SEC)
        if APPLY_TEXTURES and dump.house and dump.house.textures then
            if not texturesRemote then setStatus("⚠️ Sin remoto de texturas; se omiten.")
            else
                for roomId,room in pairs(dump.house.textures) do
                    for texType,texId in pairs(room) do
                        local ok,msg=sendTexture(texturesRemote,roomId,texType,texId)
                        if not ok then warn("[ReplicateV9] textura "..tostring(roomId).."/"..tostring(texType).." => "..tostring(msg)) end
                        task.wait(WAIT_TEXTURE)
                    end
                end
            end
        end
        if not furnituresRemote then setStatus("❌ No hay remoto de muebles tras escaneo."); DoneEvent:Fire(); return end

        -- Colocación
        local list=dump.furniture or {}; local total=#list
        for i,entry in ipairs(list) do
            local f=entry.furniture_data or entry
            local sp=entry.space or {}

            -- Elegir cframe objetivo (world primero)
            local targetWorld
            if sp.world_cf then targetWorld = toCF(sp.world_cf)
            elseif sp.root_local_cf then targetWorld = rootCF:ToWorldSpace(toCF(sp.root_local_cf))
            elseif f.cframe then targetWorld = toCF(f.cframe)
            else targetWorld = CFrame.new() end

            local props = { cframe = (serverSpace=="world") and targetWorld or (rootCF:ToObjectSpace(targetWorld)) }
            local sc=toV3(f.scale);      if sc then props.scale  = sc end
            local cs=toColors(f.colors); if cs then props.colors = cs end

            local ok,err = placeOne(furnituresRemote, f.id or f.kind, props)
            if (not ok) and RETRIES_PER_ITEM>0 then
                task.wait(0.15)
                local alt=(serverSpace=="world") and "local" or "world"
                props.cframe = (alt=="world") and targetWorld or (rootCF:ToObjectSpace(targetWorld))
                ok,err = placeOne(furnituresRemote, f.id or f.kind, props)
                if ok then serverSpace=alt; print("[ReplicateV9] switch => "..alt) end
            end
            if not ok then warn(("[ReplicateV9] Falló '%s' (%d/%d): %s"):format(tostring(f.id or f.kind), i, total, tostring(err))) end

            ReplicateEvent:Fire(i,total)
            setStatus(string.format("Replicando %d/%d…",i,total))
            task.wait(WAIT_EACH_FURNI)
        end

        setStatus("✅ Replicación completada"); DoneEvent:Fire()
    end)
end

------------------------------ UI completa
local Ui = Roact.Component:extend("ReplicateUi")
function Ui:init()
    self.state = { visible=true, url="", status="Esperando URL…", meta=nil, prog=0, total=1, downloading=false, replicating=false }
    self.c1 = ReplicateEvent.Event:Connect(function(done,total)
        self:setState{prog=done,total=total,status=string.format("Replicando %d/%d…",done,total)}
    end)
    self.c2 = DoneEvent.Event:Connect(function() self:setState{replicating=false} end)
end
function Ui:willUnmount() if self.c1 then self.c1:Disconnect() end; if self.c2 then self.c2:Disconnect() end end

local function metaStr(meta)
    if not meta then return "No dump loaded." end
    return string.format("Owner: %s\nType: %s\nFurniture: %d\nDate: %s\nFormat: %s/%s",
        tostring(meta.owner or "‑"), tostring(meta.building_type or "‑"),
        tonumber(meta.furniture_count or 0) or 0, os.date("%c", tonumber(meta.time) or 0),
        tostring((meta.format and meta.format.cframe) or "-"),
        tostring((meta.format and meta.format.space) or "-"))
end

function Ui:render()
    local s=self.state; local pct=(type(s.prog)=="number" and type(s.total)=="number" and s.total>0) and (s.prog/s.total) or 0
    return Roact.createElement("ScreenGui",{ResetOnSpawn=false},{
        Toggle=Roact.createElement("TextButton",{Text="☰",Font=Enum.Font.GothamBold,TextSize=22,BackgroundColor3=Color3.fromRGB(50,50,90),TextColor3=Color3.new(1,1,1),Size=UDim2.new(0,36,0,36),Position=UDim2.new(0,10,0,56),[Roact.Event.Activated]=function() self:setState{visible=not s.visible} end}),
        Window=Roact.createElement("Frame",{Visible=s.visible,Size=UDim2.new(0,460,0,260),Position=UDim2.new(0,60,0,60),BackgroundColor3=Color3.fromRGB(30,30,30),BorderSizePixel=0},{
            Roact.createElement("UICorner",{CornerRadius=UDim.new(0,10)}),
            Roact.createElement("TextLabel",{Text="Replicate House (URL) – V9 World/Agnostic",Font=Enum.Font.GothamBold,TextSize=22,BackgroundTransparency=1,TextColor3=Color3.new(1,1,1),Size=UDim2.new(1,-20,0,28),Position=UDim2.new(0,10,0,8),TextXAlignment=Enum.TextXAlignment.Left}),
            Roact.createElement("TextBox",{PlaceholderText="https://…/dump_house_*.json",Text=s.url,Font=Enum.Font.Code,TextSize=14,ClearTextOnFocus=false,BackgroundColor3=Color3.fromRGB(45,45,60),TextColor3=Color3.new(1,1,1),Size=UDim2.new(1,-20,0,28),Position=UDim2.new(0,10,0,38),[Roact.Change.Text]=function(r) self:setState{url=r.Text} end},{Roact.createElement("UICorner",{CornerRadius=UDim.new(0,4)})}),
            Roact.createElement("TextLabel",{Text=s.status,Font=Enum.Font.Gotham,TextSize=14,BackgroundTransparency=1,TextColor3=Color3.fromRGB(200,200,200),Size=UDim2.new(1,-20,0,18),Position=UDim2.new(0,10,0,70),TextXAlignment=Enum.TextXAlignment.Left}),
            Roact.createElement("Frame",{Size=UDim2.new(1,-20,0,10),Position=UDim2.new(0,10,0,90),BackgroundColor3=Color3.fromRGB(55,55,55),BorderSizePixel=0},{Roact.createElement("Frame",{Size=UDim2.new(pct,0,1,0),BackgroundColor3=Color3.fromRGB(60,120,200),BorderSizePixel=0})}),
            Roact.createElement("TextLabel",{Text=metaStr(s.meta),Font=Enum.Font.Gotham,TextSize=14,BackgroundColor3=Color3.fromRGB(45,45,45),TextColor3=Color3.new(1,1,1),TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Top,Size=UDim2.new(1,-20,1,-138),Position=UDim2.new(0,10,0,110),BorderSizePixel=0},{Roact.createElement("UICorner",{CornerRadius=UDim.new(0,6)})}),
            Roact.createElement("TextButton",{Text=s.downloading and"Loading…" or"Load JSON",Font=Enum.Font.GothamBold,TextSize=18,BackgroundColor3=Color3.fromRGB(80,150,90),TextColor3=Color3.new(1,1,1),Size=UDim2.new(0.48,-12,0,36),Position=UDim2.new(0,10,1,-46),AutoButtonColor=not s.downloading,
                [Roact.Event.Activated]=function()
                    if s.downloading then return end
                    local url=s.url; if not url:match("^https?://") then self:setState{status="❌ URL no válida."}; return end
                    self:setState{downloading=true,status="Descargando…",prog=0,total=1}
                    task.spawn(function()
                        local ok,body=pcall(httpFetch,url); if not ok then self:setState{status="❌ "..tostring(body),downloading=false}; return end
                        local ok2,dump=pcall(HttpService.JSONDecode,HttpService,body); if not ok2 then self:setState{status="❌ JSON mal formado",downloading=false}; return end
                        self.dumpLoaded=dump; local h=dump.house or {}
                        self:setState{downloading=false,status="JSON OK",meta={owner=h.player or h.owner or "?",building_type=h.building_type or "?",furniture_count=dump.furniture_count or #(dump.furniture or {}),time=dump.time,format=dump.format},prog=0,total=1}
                    end)
                end}),
            Roact.createElement("TextButton",{Text=s.replicating and"Replicating…" or"Replicate",Font=Enum.Font.GothamBold,TextSize=18,BackgroundColor3=Color3.fromRGB(60,120,200),TextColor3=Color3.new(1,1,1),Size=UDim2.new(0.48,-12,0,36),Position=UDim2.new(0.52,2,1,-46),AutoButtonColor=not s.replicating,
                [Roact.Event.Activated]=function()
                    if self.dumpLoaded and not s.replicating then
                        local total=self.dumpLoaded.furniture_count or #(self.dumpLoaded.furniture or {})
                        self:setState{replicating=true,status="Replicando…",prog=0,total=total}
                        replicateHouse(self.dumpLoaded,function(txt) self:setState{status=txt} end)
                    end
                end}),
        }),
    })
end
Roact.mount(Roact.createElement(Ui), LP:WaitForChild("PlayerGui"))
