-- DumpHouseInfo.lua
-- Vuelca TODA la información del interior de la casa y cada mueble.
-- Genera dos archivos JSON: uno básico (sin hex) y otro extendido (con hex).
-- dump_house_<Usuario>_<TipoCasa>_<fecha>.json
-- dump_house_<Usuario>_<TipoCasa>_<fecha>_withhex.json

local Fsys = require(game.ReplicatedStorage:WaitForChild("Fsys"))
local load = Fsys.load

local ClientData            = load("ClientData")
local InteriorsM            = load("InteriorsM")
local FurnitureDB           = load("FurnitureDB")
local FurnitureModelTracker = load("FurnitureModelTracker")
local HttpService           = game:GetService("HttpService")
local Players               = game:GetService("Players")

--------------------------------------------------------------------
-- Utilidades
--------------------------------------------------------------------
local function safeSerializeCF(cf)
	if typeof(cf) == "CFrame" then
		local p = cf.Position
		local look = (cf - cf.Position).LookVector
		return { __type="CFrame", pos={p.X,p.Y,p.Z}, look={look.X,look.Y,look.Z} }
	end
	return cf
end

local function serializeColor(color, includeHex)
	if typeof(color) == "Color3" then
		local r0,g0,b0 = color.R,color.G,color.B
		local r = math.clamp(r0,0,1)
		local g = math.clamp(g0,0,1)
		local b = math.clamp(b0,0,1)
		local out = { __type="Color3", r=r0, g=g0, b=b0 }
		if includeHex then
			out.hex = string.format("%02X%02X%02X", math.floor(r*255+0.5), math.floor(g*255+0.5), math.floor(b*255+0.5))
			out.clamped = (r~=r0 or g~=g0 or b~=b0) or nil
		end
		return out
	end
	return color
end

-- Serializador genérico seguro con límite de profundidad
local MAX_DEPTH = 5
local function serializeValue(v, ctx, depth)
	depth = depth or 0
	local visited = ctx.visited
	local includeHex = ctx.includeHex

	if depth > MAX_DEPTH then
		return {__truncated=true, type=typeof(v)}
	end

	local t = typeof(v)
	if t == "number" or t == "string" or t == "boolean" or t == "nil" then
		return v
	elseif t == "Color3" then
		return serializeColor(v, includeHex)
	elseif t == "CFrame" then
		return safeSerializeCF(v)
	elseif t == "Vector3" then
		return {__type="Vector3", x=v.X, y=v.Y, z=v.Z}
	elseif t == "ColorSequence" then
		local out = {__type="ColorSequence", keypoints={}}
		for _,kp in ipairs(v.Keypoints) do
			table.insert(out.keypoints, {time=kp.Time, value=serializeColor(kp.Value, includeHex)})
		end
		return out
	elseif t == "NumberSequence" then
		local out = {__type="NumberSequence", keypoints={}}
		for _,kp in ipairs(v.Keypoints) do
			table.insert(out.keypoints, {time=kp.Time, value=kp.Value})
		end
		return out
	elseif t == "Instance" then
		return {__type="Instance", class=v.ClassName, name=v.Name, fullName=v:GetFullName()}
	elseif t == "table" then
		if visited.map[v] then
			return {__ref = visited.map[v]}
		end
		visited.count += 1
		local id = "tbl_"..visited.count
		visited.map[v] = id
		local out = {__id=id}
		for k,val in pairs(v) do
			out[tostring(k)] = serializeValue(val, ctx, depth+1)
		end
		return out
	end
	return tostring(v)
end

local function serializeModel(model, ctx)
	if not model then return nil end
	local info = { name=model.Name, fullName=model:GetFullName(), attributes={}, children={} }

	for a,v in pairs(model:GetAttributes()) do
		info.attributes[a] = serializeValue(v, ctx)
	end
	for _,desc in ipairs(model:GetDescendants()) do
		if desc:IsA("BasePart") then
			table.insert(info.children, {
				name = desc.Name,
				class = desc.ClassName,
				size = {desc.Size.X, desc.Size.Y, desc.Size.Z},
				color = serializeColor(desc.Color, ctx.includeHex),
				transparency = desc.Transparency,
				anchored = desc.Anchored,
				cframe = safeSerializeCF(desc.CFrame)
			})
		end
	end
	return info
end

local function waitForHouseInterior(timeout)
	local t0 = os.clock()
	while true do
		local interior = ClientData.get("house_interior")
		local loc = InteriorsM.get_current_location()
		if interior and loc and loc.destination_id == "housing" then
			return interior
		end
		if timeout and os.clock() - t0 > timeout then
			return nil
		end
		task.wait(0.2)
	end
end

--------------------------------------------------------------------
-- Volcado (param includeHex)
--------------------------------------------------------------------
local function buildDump(includeHex)
	local ctx = {visited = {map = {}, count = 0}, includeHex = includeHex}

	local interior = ClientData.get("house_interior")
	if not interior then
		return {error = "No hay interior cargado."}
	end

	-- Datos generales (sin furniture)
	local houseInfo = {}
	for k,v in pairs(interior) do
		if k ~= "furniture" then
			houseInfo[k] = serializeValue(v, ctx)
		end
	end

	-- Addons
	local addons = {}
	if interior.active_addons then
		for _,name in ipairs(interior.active_addons) do
			addons[name] = true
		end
	elseif interior.addons then
		for name,enabled in pairs(interior.addons) do
			if enabled then addons[name] = true end
		end
	end
	houseInfo.active_addons_resolved = addons

	-- Muebles
	local furnitureDump = {}
	for unique, data in pairs(interior.furniture or {}) do
		local dbEntry = FurnitureDB[data.id]
		local model = FurnitureModelTracker.get_furniture_by_unique(unique)

		local dbSerialized
		if dbEntry then
			dbSerialized = {}
			for k,v in pairs(dbEntry) do
				dbSerialized[k] = serializeValue(v, ctx)
			end
		end

		local entry = {
			unique = unique,
			furniture_data = {
				id = data.id,
				cframe = serializeValue(data.cframe, ctx),
				scale = serializeValue(data.scale, ctx),
				colors = serializeValue(data.colors, ctx),
				mutated = data.mutated,
			},
			db = dbSerialized,
			model = serializeModel(model, ctx),
		}

		for k,v in pairs(data) do
			if entry.furniture_data[k] == nil then
				entry.furniture_data[k] = serializeValue(v, ctx)
			end
		end
		table.insert(furnitureDump, entry)
	end
	table.sort(furnitureDump, function(a,b) return tostring(a.furniture_data.id) < tostring(b.furniture_data.id) end)

	-- Location: sólo campos básicos
	local loc = InteriorsM.get_current_location()
	local locationDump
	if loc then
		locationDump = {
			destination_id = loc.destination_id,
			player = tostring(loc.player),
		}
	end

	return {
		time = os.time(),
		location = locationDump,
		house = houseInfo,
		furniture_count = #furnitureDump,
		furniture = furnitureDump
	}
end

--------------------------------------------------------------------
-- Guardado
--------------------------------------------------------------------
local function sanitize(str)
	str = tostring(str or "unknown")
	str = str:gsub("[^%w_%-]", "_")
	return str
end

local function saveToPlayerGui(name, jsonText)
	local pg = Players.LocalPlayer:WaitForChild("PlayerGui")
	local folder = pg:FindFirstChild("HouseDump")
	if not folder then
		folder = Instance.new("Folder")
		folder.Name = "HouseDump"
		folder.Parent = pg
	end
	local sv = Instance.new("StringValue")
	sv.Name = name
	if #jsonText <= 50000 then -- límite seguro
		local ok,err = pcall(function() sv.Value = jsonText end)
		if not ok then
			warn("[DumpHouse] No se pudo guardar JSON completo en PlayerGui:", err)
			sv.Value = "[JSON demasiado grande; revisa el archivo en disco]"
		end
	else
		sv.Value = "[JSON demasiado grande ("..#jsonText.."); revisa el archivo en disco]"
	end
	sv.Parent = folder
	return sv
end

local function saveToDisk(filename, jsonText)
	if not writefile then
		warn("[DumpHouse] writefile no disponible; no se pudo crear "..filename)
		return false
	end
	if makefolder and isfolder and not isfolder("HouseDumps") then
		pcall(makefolder, "HouseDumps")
	end
	local path = "HouseDumps/"..filename
	local ok,err = pcall(function() writefile(path, jsonText) end)
	if ok then
		print("[DumpHouse] Archivo guardado en "..path)
	else
		warn("[DumpHouse] Error al guardar archivo:", err)
	end
	return ok
end

--------------------------------------------------------------------
-- Función pública
--------------------------------------------------------------------
function DumpHouse()
	local interior = ClientData.get("house_interior")
	if not interior then
		warn("[DumpHouse] No hay interior cargado.")
		return
	end

	-- detectar tipo de casa
	local houseType = interior.house_kind or interior.houseType or interior.kind or interior.id or interior.house_id or "unknown"
	houseType = sanitize(houseType)
	local playerName = sanitize(Players.LocalPlayer.Name)
	local dateStr = os.date("%Y%m%d_%H%M%S")

	-- construir dumps
	local dumpBasic   = buildDump(false)
	local dumpExtended = buildDump(true)

	local okBasic, jsonBasic = pcall(function() return HttpService:JSONEncode(dumpBasic) end)
	local okExt,   jsonExt   = pcall(function() return HttpService:JSONEncode(dumpExtended) end)

	if not okBasic then warn("[DumpHouse] Error JSON básico:", jsonBasic) return end
	if not okExt   then warn("[DumpHouse] Error JSON extendido:", jsonExt)   return end

	print("===== DUMP CASA (BÁSICO) =====")
	print(jsonBasic:sub(1,5000)) -- no saturar consola

	-- nombres de archivo
	local baseFile = string.format("dump_house_%s_%s_%s.json", playerName, houseType, dateStr)
	local extFile  = string.format("dump_house_%s_%s_%s_withhex.json", playerName, houseType, dateStr)

	-- Guardar en PlayerGui (solo versiones cortas / mensajes)
	saveToPlayerGui("DumpBasic_"..dateStr, jsonBasic)
	saveToPlayerGui("DumpExtended_"..dateStr, jsonExt)

	-- Guardar en disco
	saveToDisk(baseFile, jsonBasic)
	saveToDisk(extFile, jsonExt)

	-- Portapapeles (básico)
	if setclipboard then
		pcall(setclipboard, jsonBasic)
		print("[DumpHouse] JSON básico copiado al portapapeles.")
	end

	print("[DumpHouse] Listo.")
	return dumpBasic, dumpExtended
end

--------------------------------------------------------------------
-- Auto‑ejecución
--------------------------------------------------------------------
task.spawn(function()
	local interior = waitForHouseInterior(30)
	if not interior then
		warn("[DumpHouse] No se cargó la casa en 30s.")
		return
	end
	print("[DumpHouse] Casa detectada; generando volcado...")
	DumpHouse()
end)

-- Ejecuta de nuevo con: DumpHouse()
