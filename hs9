-- LocalScript: listar info completa de la casa (con posiciones)

local load = require(game.ReplicatedStorage.Fsys).load
local ClientData = load("ClientData")

local STARTER_GUI = game:GetService("StarterGui")

local function colorToHex(c: Color3)
	return string.format("#%02X%02X%02X", math.floor(c.R*255), math.floor(c.G*255), math.floor(c.B*255))
end

local function vecToStr(v: Vector3?)
	if not v then return "(sin posición)" end
	return string.format("(%.1f, %.1f, %.1f)", v.X, v.Y, v.Z)
end

local function systemMessage(text)
	pcall(function()
		STARTER_GUI:SetCore("ChatMakeSystemMessage", {
			Text = text;
			Color = Color3.new(1,1,0);
			Font = Enum.Font.SourceSansBold;
			TextSize = 18;
		})
	end)
	print(text)
end

local function findInteriorModel(timeout)
	timeout = timeout or 5
	local root = workspace:FindFirstChild("HouseInteriors")
	if not root then return nil end
	local t0 = tick()
	while tick() - t0 < timeout do
		for _, m in ipairs(root:GetDescendants()) do
			if m:IsA("Model") and m:FindFirstChild("Walls") and m:FindFirstChild("Floors") and m:FindFirstChild("Doors") then
				return m
			end
		end
		task.wait(0.1)
	end
end

local function findFurnitureFolder()
	local root = workspace:FindFirstChild("HouseInteriors")
	if not root then return nil end
	for _, f in ipairs(root:GetDescendants()) do
		if f:IsA("Folder") and f.Name == "furniture" then
			return f
		end
	end
end

local function listBaseParts(folder: Instance)
	local list = {}
	if not folder then return list end
	for _, d in ipairs(folder:GetDescendants()) do
		if d:IsA("BasePart") then
			table.insert(list, {
				inst = d,
				name = d.Name,
				color = colorToHex(d.Color),
				pos = d.Position
			})
		end
	end
	return list
end

local function listTextures(folder: Instance)
	local list = {}
	if not folder then return list end
	for _, d in ipairs(folder:GetDescendants()) do
		if d:IsA("Texture") and d.Parent and d.Parent:IsA("BasePart") then
			table.insert(list, {
				inst = d,
				name = "Texture "..d.Name.." ("..d.Parent.Name..")",
				color = colorToHex(d.Color3),
				pos = d.Parent.Position
			})
		end
	end
	return list
end

local function classifyWalls(wallsParts)
	local paredes, ventanas, techos = {}, {}, {}
	for _, info in ipairs(wallsParts) do
		local nLower = string.lower(info.name)
		if nLower:find("window") then
			table.insert(ventanas, info)
		elseif nLower:find("ceiling") or nLower:find("roof") then
			table.insert(techos, info)
		else
			table.insert(paredes, info)
		end
	end
	return paredes, ventanas, techos
end

local function collectFurniture()
	local folder = findFurnitureFolder()
	local result = {}
	if not folder then return result end
	for _, child in ipairs(folder:GetChildren()) do
		if child:IsA("Model") then
			local foundColor, foundPos
			for _, p in ipairs(child:GetDescendants()) do
				if p:IsA("BasePart") then
					foundColor = colorToHex(p.Color)
					foundPos = p.Position
					break
				end
			end
			table.insert(result, {
				name = child.Name,
				color = foundColor or "N/A",
				pos = foundPos
			})
		end
	end
	return result
end

local function dumpCategory(title, list)
	if #list == 0 then
		systemMessage(title..": (vacío)")
	else
		systemMessage(title..":")
		for _, item in ipairs(list) do
			systemMessage((" - %s %s (%s)"):format(item.name, vecToStr(item.pos), item.color))
			task.wait()
		end
	end
end

local function reportHouse()
	local hi = ClientData.get("house_interior")
	if not hi or not hi.player then
		return
	end

	systemMessage(string.rep("-", 40))
	systemMessage(("Propietario: %s | Tipo de casa: %s"):format(hi.player.Name, tostring(hi.building_type)))
	systemMessage(("House ID: %s"):format(tostring(hi.house_id or "")))

	local interior = findInteriorModel(5)
	if not interior then
		systemMessage("Interior no encontrado todavía (espera un momento y vuelve a entrar).")
		return
	end

	local floorsFolder = interior:FindFirstChild("Floors")
	local wallsFolder  = interior:FindFirstChild("Walls")
	local doorsFolder  = interior:FindFirstChild("Doors")

	local sueloParts = listBaseParts(floorsFolder)
	local wallsParts = listBaseParts(wallsFolder)
	local paredesParts, ventanasParts, techoParts = classifyWalls(wallsParts)
	local puertasParts = listBaseParts(doorsFolder)
	local wallTextures = listTextures(wallsFolder)
	local floorTextures = listTextures(floorsFolder)
	local muebles = collectFurniture()

	dumpCategory("Muebles", muebles)
	dumpCategory("Suelo (partes)", sueloParts)
	dumpCategory("Texturas de suelo", floorTextures)
	dumpCategory("Paredes (partes)", paredesParts)
	dumpCategory("Ventanas", ventanasParts)
	dumpCategory("Techo", techoParts)
	dumpCategory("Texturas de paredes", wallTextures)
	dumpCategory("Puertas", puertasParts)
	systemMessage(string.rep("-", 40))
end

ClientData.register_callback("house_interior", function(_,_,_)
	task.delay(1, reportHouse)
end)

task.delay(2, reportHouse)
