--═════════════════════════════════════════════════════════════════════
-- ReplicateHouseFromURL.lua  V6 (RootLocal)
--  • LEE dumps con format.space = "root_local_only"
--  • Toma el interior actual (pivot) y hace: world = rootHere:ToWorldSpace(local_cf)
--  • Compra uno por uno (BuyFurnitures)
--  • Auto‑detecta si el server espera CFrame WORLD o LOCAL mirando muebles ya existentes
--  • Si falla en un espacio, intenta el otro (por mueble), sin bucles infinitos
--  • Fsys loader robusto (sin “attempt to call a nil value”)
--═════════════════════════════════════════════════════════════════════

------------------------------ Ajustes --------------------------------
local WAIT_EACH_FURNI  = 0.07
local RETRIES_PER_ITEM = 1
local WAIT_TEXTURE     = 0.05
local EPS_DETECT       = 1e-3

------------------------------ Servicios ------------------------------
local RS          = game:GetService("ReplicatedStorage")
local Players     = game:GetService("Players")
local LP          = Players.LocalPlayer
local HttpService = game:GetService("HttpService")

------------------------------ Fsys seguro ---------------------------
local Fsys = require(RS:WaitForChild("Fsys"))
local function FsLoad(name)
    if Fsys and type(Fsys.load)=="function" then
        local ok,m = pcall(Fsys.load,name)       ; if ok and m~=nil then return m end
        local ok2,m2= pcall(Fsys.load,Fsys,name) ; if ok2 and m2~=nil then return m2 end
    end
    error(("[Replicate] No se pudo cargar '%s'"):format(tostring(name)))
end
local Roact        = FsLoad("Roact")
local RouterClient = FsLoad("RouterClient")
local HouseClient  = FsLoad("HouseClient")
local InteriorsM   = FsLoad("InteriorsM")
local ClientData   = FsLoad("ClientData")
local FurnitureModelTracker = (function() local ok,m=pcall(FsLoad,"FurnitureModelTracker"); return ok and m or nil end)()

------------------------------ Router --------------------------------
local function RC(route) local r=RouterClient.get(route); if not r then warn("[Replicate] no route "..route) end; return r end
local function rcInvoke(route, ...) local r=RC(route); if not r or not r.InvokeServer then return false,"remote nil" end; return pcall(r.InvokeServer,r,...) end
local function rcFire(route, ...) local r=RC(route); if r and r.FireServer then pcall(r.FireServer,r,...) end

------------------------------ HTTP ----------------------------------
local proxyRF
local function getProxy()
    if proxyRF then return proxyRF end
    proxyRF=Instance.new("RemoteFunction"); proxyRF.Name="__ReplicateHttpProxy"; proxyRF.Parent=RS
    proxyRF.OnServerInvoke=function(_,url) local ok,res=pcall(HttpService.GetAsync,HttpService,url,false); return ok, ok and res or tostring(res) end
    return proxyRF
end
local function httpFetch(url)
    local req=(syn and syn.request) or (http and http.request) or request
    if req then local r=req{Url=url,Method="GET"}; if r and r.StatusCode==200 then return r.Body end end
    if game.HttpGet then local ok,b=pcall(game.HttpGet,game,url); if ok then return b end end
    local ok,res=getProxy():InvokeServer(url); if ok then return res end; error(res)
end

------------------------------ Reconstrucción -------------------------
local function cf_from_basis(t) local p=Vector3.new(t.pos[1],t.pos[2],t.pos[3]); local r=Vector3.new(t.right[1],t.right[2],t.right[3]); local u=Vector3.new(t.up[1],t.up[2],t.up[3]); return CFrame.fromMatrix(p,r,u) end
local function toCF(v)
    if typeof(v)=="CFrame" then return v end
    if type(v)=="table" and v.__type=="CFrame" then
        if v.pos and v.right and v.up then return cf_from_basis(v) end
        if v.pos and v.look then local p=Vector3.new(v.pos[1],v.pos[2],v.pos[3]); local lv=Vector3.new(v.look[1],v.look[2],v.look[3]); return CFrame.lookAt(p,p+lv) end
        if v.pos and v.axis and v.angle then local p=Vector3.new(v.pos[1],v.pos[2],v.pos[3]); local ax=Vector3.new(v.axis[1],v.axis[2],v.axis[3]).Unit; return CFrame.fromAxisAngle(ax,v.angle)+p end
    end
    return CFrame.new()
end
local function toV3(v) if typeof(v)=="Vector3" then return v end; if type(v)=="number" then return Vector3.new(v,v,v) end
    if type(v)=="table" then if v.__type=="Vector3" then return Vector3.new(v.x or v[1] or 0, v.y or v[2] or 0, v.z or v[3] or 0) end
        if v[1] and v[2] and v[3] then return Vector3.new(v[1],v[2],v[3]) end end end
local function c3(t) if typeof(t)=="Color3" then return t end; if type(t)=="table" and t.__type=="Color3" then
    local r,g,b=tonumber(t.r) or 0, tonumber(t.g) or 0, tonumber(t.b) or 0; if r>1 or g>1 or b>1 then r/=255; g/=255; b/=255 end; return Color3.new(r,g,b)
end; if type(t)=="table" and t.hex then local n=tonumber(t.hex,16) or 0; return Color3.fromRGB(math.floor(n/65536)%256, math.floor(n/256)%256, n%256) end end
local function toColors(tbl) if not tbl then return nil end; if typeof(tbl)=="Color3" then return {tbl} end
    local out={}; for k,v in pairs(tbl) do local c=c3(v); if c then out[k]=c end end; return next(out) and out or nil end

------------------------------ Interior actual -----------------------
local function tryCall(mod, name, ...) if not mod then return nil end local f=mod[name]; if type(f)~="function" then return nil end local ok,res=pcall(f,...); if ok then return res end end
local function getPivotCF(inst) if not inst then return nil end; if inst:IsA("Model") then local ok,cf=pcall(inst.GetPivot,inst); if ok then return cf end elseif inst:IsA("BasePart") then return inst.CFrame end end
local function findInteriorRootModel()
    local loc=tryCall(InteriorsM,"get_current_location")
    if type(loc)=="table" then if typeof(loc.model)=="Instance" then return loc.model end; if typeof(loc.container)=="Instance" then return loc.container end end
end

-- Detecta si el servidor guarda/espera WORLD o LOCAL usando muebles existentes
local function detect_server_space(currentRootCF)
    local interior=ClientData.get("house_interior"); if not interior or not interior.furniture then return "world" end
    for unique,data in pairs(interior.furniture) do
        if data and data.cframe and FurnitureModelTracker then
            local mdl=FurnitureModelTracker.get_furniture_by_unique(unique)
            if mdl then
                local mcf=getPivotCF(mdl); if mcf then
                    local dcw=toCF(data.cframe) -- interpretado como world
                    local dcl=currentRootCF and currentRootCF:ToWorldSpace(toCF(data.cframe)) or nil
                    local d1=(mcf.Position - dcw.Position).Magnitude
                    local d2=dcl and (mcf.Position - dcl.Position).Magnitude or math.huge
                    if d1 < EPS_DETECT and d1<=d2 then return "world" end
                    if d2 < EPS_DETECT and d2< d1 then return "local" end
                end
            end
        end
    end
    return "world"
end

------------------------------ UI eventos ---------------------------
local ReplicateEvent = Instance.new("BindableEvent")
local DoneEvent      = Instance.new("BindableEvent")

------------------------------ BuyFurnitures ------------------------
local function placeOne(kind, props)
    local payload = { { kind = kind, properties = props } }
    local ok,res = rcInvoke("HousingAPI/BuyFurnitures", payload)
    if not ok then return false, "pcall "..tostring(res) end
    if type(res)=="table" and res.success==false then return false, tostring(res.status or "failed") end
    return true
end

------------------------------ Replicación --------------------------
local function replicateHouse(dump, setStatus)
    task.spawn(function()
        -- Edit mode
        local okEdit,isOn=pcall(HouseClient.is_edit_mode_active)
        if not (okEdit and isOn) then
            setStatus("Pulsa *Edit House* (15s)…")
            local t0=tick(); while true do local ok,on=pcall(HouseClient.is_edit_mode_active); if ok and on then break end
                if tick()-t0>15 then setStatus("❌ No se pudo entrar en modo edición."); DoneEvent:Fire(); return end; task.wait(0.2) end
        end
        setStatus("✓ Edit mode detectado")

        -- pivot del interior ACTUAL
        local rootModel     = findInteriorRootModel()
        local currentRootCF = getPivotCF(rootModel) or CFrame.new()

        -- detectar espacio servidor
        local serverSpace   = detect_server_space(currentRootCF)

        -- texturas
        if dump.house and dump.house.textures then
            for roomId,room in pairs(dump.house.textures) do
                for texType,texId in pairs(room) do rcFire("HousingAPI/BuyTexture",roomId,texType,texId); task.wait(WAIT_TEXTURE) end
            end
        end

        -- muebles
        local list = dump.furniture or {}; local total=#list
        for i,entry in ipairs(list) do
            local f = entry.furniture_data or entry
            local loc = (entry.space and entry.space.local_cf) or (f.local_cf) -- por compatibilidad
            if not loc then loc = entry.cframe or f.cframe end -- muy antiguo (mejor que nada)
            local local_cf  = toCF(loc)
            local world_cf  = currentRootCF:ToWorldSpace(local_cf)

            local function mkProps(which)
                local props = { cframe = (which=="world") and world_cf or local_cf }
                local sc=toV3(f.scale); if sc then props.scale=sc end
                local cs=toColors(f.colors); if cs then props.colors=cs end
                return props
            end

            local ok,err = placeOne(f.id or f.kind, mkProps(serverSpace))
            if (not ok) and RETRIES_PER_ITEM>0 then
                task.wait(0.15)
                local alt=(serverSpace=="world") and "local" or "world"
                ok,err = placeOne(f.id or f.kind, mkProps(alt))
                if ok then serverSpace=alt; print("[Replicate RootLocal] cambio space => "..alt) end
            end
            if not ok then
                warn(("[Replicate] Falló '%s' (%d/%d): %s"):format(tostring(f.id or f.kind), i, total, tostring(err)))
            end

            ReplicateEvent:Fire(i,total)
            task.wait(WAIT_EACH_FURNI)
        end

        rcFire("HousingAPI/SendHousingOnePointOneLog","edit_state_exited",{})
        setStatus("✅ Replicación completada"); DoneEvent:Fire()
    end)
end

------------------------------ UI ----------------------------------
local Ui = Roact.Component:extend("ReplicateUi")
function Ui:init()
    self.state={visible=true,url="",status="Esperando URL…",meta=nil,prog=0,total=1,downloading=false,replicating=false}
    self.c1=ReplicateEvent.Event:Connect(function(done,total)
        self:setState{prog=done,total=total,status=string.format("Replicando %d/%d…",done,total)}
    end)
    self.c2=DoneEvent.Event:Connect(function() self:setState{replicating=false} end)
end
function Ui:willUnmount() if self.c1 then self.c1:Disconnect() end; if self.c2 then self.c2:Disconnect() end end

local function metaStr(meta)
    if not meta then return "No dump loaded." end
    return string.format("Owner: %s\nType: %s\nFurniture: %d\nDate: %s\nFormat: %s/%s",
        tostring(meta.owner or "‑"), tostring(meta.building_type or "‑"),
        tonumber(meta.furniture_count or 0) or 0, os.date("%c", tonumber(meta.time) or 0),
        tostring((meta.format and meta.format.cframe) or "-"),
        tostring((meta.format and meta.format.space) or "-"))
end

function Ui:render()
    local s=self.state; local pct=s.prog/math.max(1,s.total)
    return Roact.createElement("ScreenGui",{ResetOnSpawn=false},{
        Toggle=Roact.createElement("TextButton",{Text="☰",Font=Enum.Font.GothamBold,TextSize=22,BackgroundColor3=Color3.fromRGB(50,50,90),TextColor3=Color3.new(1,1,1),Size=UDim2.new(0,36,0,36),Position=UDim2.new(0,10,0,56),[Roact.Event.Activated]=function() self:setState{visible=not s.visible} end}),
        Window=Roact.createElement("Frame",{Visible=s.visible,Size=UDim2.new(0,460,0,260),Position=UDim2.new(0,60,0,60),BackgroundColor3=Color3.fromRGB(30,30,30),BorderSizePixel=0},{
            Roact.createElement("UICorner",{CornerRadius=UDim.new(0,10)}),
            Roact.createElement("TextLabel",{Text="Replicate House (URL) – V6 RootLocal",Font=Enum.Font.GothamBold,TextSize=22,BackgroundTransparency=1,TextColor3=Color3.new(1,1,1),Size=UDim2.new(1,-20,0,28),Position=UDim2.new(0,10,0,8),TextXAlignment=Enum.TextXAlignment.Left}),
            Roact.createElement("TextBox",{PlaceholderText="https://…/dump_house_*.json",Text=s.url,Font=Enum.Font.Code,TextSize=14,ClearTextOnFocus=false,BackgroundColor3=Color3.fromRGB(45,45,60),TextColor3=Color3.new(1,1,1),Size=UDim2.new(1,-20,0,28),Position=UDim2.new(0,10,0,38),[Roact.Change.Text]=function(r) self:setState{url=r.Text} end},{Roact.createElement("UICorner",{CornerRadius=UDim.new(0,4)})}),
            Roact.createElement("TextLabel",{Text=s.status,Font=Enum.Font.Gotham,TextSize=14,BackgroundTransparency=1,TextColor3=Color3.fromRGB(200,200,200),Size=UDim2.new(1,-20,0,18),Position=UDim2.new(0,10,0,70),TextXAlignment=Enum.TextXAlignment.Left}),
            Roact.createElement("Frame",{Size=UDim2.new(1,-20,0,10),Position=UDim2.new(0,10,0,90),BackgroundColor3=Color3.fromRGB(55,55,55),BorderSizePixel=0},{
                Roact.createElement("Frame",{Size=UDim2.new(pct,0,1,0),BackgroundColor3=Color3.fromRGB(60,120,200),BorderSizePixel=0})
            }),
            Roact.createElement("TextLabel",{Text=metaStr(s.meta),Font=Enum.Font.Gotham,TextSize=14,BackgroundColor3=Color3.fromRGB(45,45,45),TextColor3=Color3.new(1,1,1),TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Top,Size=UDim2.new(1,-20,1,-138),Position=UDim2.new(0,10,0,110),BorderSizePixel=0},{Roact.createElement("UICorner",{CornerRadius=UDim.new(0,6)})}),
            Roact.createElement("TextButton",{Text=s.downloading and"Loading…" or"Load JSON",Font=Enum.Font.GothamBold,TextSize=18,BackgroundColor3=Color3.fromRGB(80,150,90),TextColor3=Color3.new(1,1,1),Size=UDim2.new(0.48,-12,0,36),Position=UDim2.new(0,10,1,-46),AutoButtonColor=not s.downloading,
                [Roact.Event.Activated]=function()
                    if s.downloading then return end
                    local url=s.url; if not url:match("^https?://") then self:setState{status="❌ URL no válida."}; return end
                    self:setState{downloading=true,status="Descargando…",prog=0,total=1}
                    task.spawn(function()
                        local ok,body=pcall(httpFetch,url); if not ok then self:setState{status="❌ "..tostring(body),downloading=false}; return end
                        local ok2,dump=pcall(HttpService.JSONDecode,HttpService,body); if not ok2 then self:setState{status="❌ JSON mal formado",downloading=false}; return end
                        self.dumpLoaded=dump; local h=dump.house or {}
                        self:setState{downloading=false,status="JSON OK",
                            meta={owner=h.player or h.owner or "?",building_type=h.building_type or "?",furniture_count=dump.furniture_count or #(dump.furniture or {}),time=dump.time,format=dump.format},
                            prog=0,total=1}
                    end)
                end}),
            Roact.createElement("TextButton",{Text=s.replicating and"Replicating…" or"Replicate",Font=Enum.Font.GothamBold,TextSize=18,BackgroundColor3=Color3.fromRGB(60,120,200),TextColor3=Color3.new(1,1,1),Size=UDim2.new(0.48,-12,0,36),Position=UDim2.new(0.52,2,1,-46),AutoButtonColor=not s.replicating,
                [Roact.Event.Activated]=function()
                    if self.dumpLoaded and not s.replicating then
                        local total=self.dumpLoaded.furniture_count or #(self.dumpLoaded.furniture or {})
                        self:setState{replicating=true,status="Replicando…",prog=0,total=total}
                        replicateHouse(self.dumpLoaded,function(txt) self:setState{status=txt} end)
                    end
                end}),
        }),
    })
end
Roact.mount(Roact.createElement(Ui), LP:WaitForChild("PlayerGui"))
