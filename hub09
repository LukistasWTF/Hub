getgenv().Get =
    setmetatable(
    {},
    {
        __index = function(A, B)
            return game:GetService(B)
        end
    }
)

loadstring(game:HttpGet("https://raw.githubusercontent.com/LukistasWTF/Hub/main/Universal_Client_Bypass"))()
local Config = {
    WindowName = "Michery Shell | by Mιƈԋҽɾყ#8627",
    Color = Color3.fromRGB(250, 54, 11),
    Keybind = Enum.KeyCode.RightControl
}

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ReplicatedFirst = game:GetService("ReplicatedFirst")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Lighting = game:GetService("Lighting")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Debris = game:GetService("Debris")
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")

local Player = Players.LocalPlayer
local wait = task.wait

Player.Idled:connect(
    function()
        game:GetService("VirtualUser"):ClickButton2(Vector2.new())
    end
)
local NewsApp = Player.PlayerGui:FindFirstChild("NewsApp")
local PlayButton = NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton
local Baby = Player.PlayerGui.DialogApp.Dialog.RoleChooserDialog.Baby
repeat
    wait()
    if PlayButton.Visible then
        for i,v in pairs(getconnections(PlayButton.MouseButton1Click)) do
            v:Fire()
        end 
    end 
until Baby and Baby.Visible or Player.Character:FindFirstChild("HumanoidRootPart") and Workspace.Camera.CameraSubject == Player.Character:WaitForChild("Humanoid")

if Baby.Visible then
    for i,v in pairs(getconnections(Baby.MouseButton1Click)) do
        v:Fire()
    end 
end 


local Name = "ROOT" .. " " .. Player.Name .. ".json"

Des = {}
if makefolder then
    makefolder("Michery Hub")
end

local Settings

if
    not pcall(
        function()
            readfile("Michery Shell//" .. Name)
        end
    )
 then
    writefile("Michery Shell//" .. Name, HttpService:JSONEncode(Des))
end
if readfile("Michery Shell//" .. Name) then
    Settings = HttpService:JSONDecode(readfile("Michery Hub//" .. Name))
end

local function Save()
    writefile("Michery Shell//" .. Name, HttpService:JSONEncode(Settings))
end



StarterGui:SetCore(
    "SendNotification",
    {
        Title = "Warning",
        Text = "HWID Incorrecto, Iniciando Shell"
    }
)


RunService.RenderStepped:connect(
    function()
        pcall(
            function()
                for i, v in ipairs(Workspace.Interiors:GetChildren()) do
                    if v.ClassName == "Model" and v.Name:match("MainMap") then
                        wait()
                        v.Name = "MainMap"
                    end
                end
                for i, v in pairs(Workspace.HouseInteriors.furniture:GetChildren()) do
                    v.Name = string.gsub(v.Name, Players.LocalPlayer.Name .. "/", "")
                    v.Name = string.gsub(v.Name, "%d+" .. "/", "")
                    v.Name = string.gsub(v.Name, "nil" .. "/true/", "")
                end
                if Workspace:FindFirstChild("ServerSidedMapSeats") then
                    Workspace.ServerSidedMapSeats:remove()
                end
            end
        )
    end
)

local getupvalue = getupvalue or debug.getupvalue
local getconstant = getconstant or debug.getconstant

local getconstants = getconstants or debug.getconstants
local getgc = getgc or get_gc_objects or debug.getgc
local getreg = getreg or getregistry or debug.getregistry
local get_thread_context = get_thread_context or getthreadcontext or getidentity or syn.get_thread_identity
local get_thread_identity = get_thread_context
local set_thread_context = set_thread_context or setthreadcontext or setidentity or syn.set_thread_identity
local set_thread_identity = set_thread_context

local Remotes = {}
local Inventorys = ReplicatedStorage.ClientDB.Inventory
local InventoryGiftsSubDB = require(Inventorys.InventoryGiftsSubDB)
wait(1)

do
    local Location
    for i, v in pairs(getgc()) do
        if type(v) == "function" then
            if getfenv(v).script == ReplicatedStorage.ClientModules.Core.InteriorsM.InteriorsM then
                if table.find(getconstants(v), "LocationAPI/SetLocation") then
                    Location = v
                    break
                end
            end
        end
    end
    wait(0.5)
    local function SetLocation(a, b, c)
        local k = get_thread_identity()
        set_thread_identity(2)
        Location(a, b, c)
        set_thread_identity(k)
    end
    function Home()
        if Workspace.HouseInteriors.blueprint:FindFirstChildWhichIsA("Model") then
            return Workspace.HouseInteriors.blueprint:FindFirstChildWhichIsA("Model").Name
        else
            return false
        end
    end

    function Store()
        if Workspace.Interiors:FindFirstChildWhichIsA("Model") then
            if
                (Workspace.Interiors:FindFirstChildWhichIsA("Model").Name ~= "MainMap") and
                    (Workspace.Interiors:FindFirstChildWhichIsA("Model").Name ~= "Neighborhood")
             then
                return Workspace.Interiors:FindFirstChildWhichIsA("Model").Name
            else
                return false
            end
        else
            return false
        end
    end

    function MainMap()
        if Workspace.Interiors:FindFirstChildWhichIsA("Model") then
            if Workspace.Interiors:FindFirstChildWhichIsA("Model").Name == "MainMap" then
                return Workspace.Interiors:FindFirstChildWhichIsA("Model").Name
            else
                return false
            end
        else
            return false
        end
    end

    function Neighborhood()
        if Workspace.Interiors:FindFirstChildWhichIsA("Model") then
            if Workspace.Interiors:FindFirstChildWhichIsA("Model").Name == "Neighborhood" then
                return Workspace.Interiors:FindFirstChildWhichIsA("Model").Name
            else
                return false
            end
        else
            return false
        end
    end

    function GoToStore(Name)
        if Store() == Name then
            return true
        end
        SetLocation(Name, "MainDoor", {})
        while Store() ~= Name do
            wait()
        end
        if Home() then
            return true
        end
        return false
    end

    function GoToHome()
        SetLocation("housing", "MainDoor", {["house_owner"] = Player})
        while not Home() do
            wait()
        end
        if Home() then
            return true
        end
        return false
    end

    function GoToNeighborhood()
        SetLocation("Neighborhood", "MainDoor", {})
        while not Neighborhood() do
            wait()
        end
        if Neighborhood() then
            return true
        end
        return false
    end

    function GoToMainMap()
        SetLocation("MainMap", "Neighborhood/MainDoor", {})
        while not MainMap() do
            wait()
        end
        if MainMap() then
            return true
        end
        return false
    end

    function Type(Name)
        GoToHome()
        for i, v in pairs(Workspace.HouseInteriors.furniture:GetChildren()) do
            if v:FindFirstChildWhichIsA("Model") then
                if v:FindFirstChildWhichIsA("Model"):FindFirstChild("UseBlocks") then
                    local Furniture = v:FindFirstChildWhichIsA("Model")
                    if Furniture.UseBlocks:FindFirstChild("UseBlock") then
                        if Furniture.UseBlocks:FindFirstChild("UseBlock"):FindFirstChild("Configuration") then
                            if
                                Furniture.UseBlocks:FindFirstChild("UseBlock"):FindFirstChild("Configuration"):FindFirstChild(
                                    "use_id"
                                )
                             then
                                if
                                    Furniture.UseBlocks:FindFirstChild("UseBlock"):FindFirstChild("Configuration"):FindFirstChild(
                                        "use_id"
                                    ).Value == Name
                                 then
                                     return v.Name
                                end
                            end
                        end
                    end
                end
            end
        end
        return false
    end
end

local Stores = {
    "CoffeeShop",
    "Supermarket",
    "PizzaShop",
    "ToyShop",
    "Obbies",
    "Neighborhood",
    "CampingShop",
    "AutoShop",
    "Nursery",
    "Cave",
    "IceCream",
    "PotionShop",
    "SkyCastle",
    "Hospital",
    "HatShop",
    "PetShop",
    "School",
    "BabyShop",
    "HotSpringHouse",
    "SafetyHub",
    "DebugInterior",
    "VIP",
    "Salon",
    "SpleefMinigame",
    "SimonSaysMinigame",
    "WinterCastle"
}

local Neon = {}
local Spec = {}
Settings.Key = {}
local PetID
local Pet
local PetsShow = {}
local List = {}
for i, v in pairs(require(ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.pets) do
    local Key = tostring(v["id"]) .. " - " .. tostring(v["properties"]["age"]) .. " years old"
    PetsShow[Key] = v
    table.insert(List, Key)
    table.sort(List, key)
end



for i, v in pairs(debug.getupvalue(require(ReplicatedStorage.Fsys).load("RouterClient").init, 4)) do
    v.Name = i
end
pcall(
    function()
        ReplicatedStorage.API:FindFirstChild("DailyLoginAPI/ClaimDailyReward"):InvokeServer()
    end
)

local FlyPets = function(A)
    pcall(
        function()
            for i, v in pairs(
                require(ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].inventory.pets
            ) do
                if A then
                    v.properties.rideable = true
                    v.properties.flyable = true
                elseif not A then
                    v.properties.rideable = false
                    v.properties.flyable = false
                end
            end
        end
    )
end


local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/LukistasWTF/Hub/main/test"))()
local Window = Library:CreateWindow(Config, CoreGui)

local Tab1 = Window:CreateTab("HWID Incorrecto")

local Section1 = Tab1:CreateSection("Ejecutar")
--local Section5 = Tab2:CreateSection("Misc")
local Tasks = {"hungry","sleepy","thirsty","bored","dirty","camping","sick","school","hot_spring","salon","pizza_party"}
-------------
local Button1 = Section1:CreateButton("Michery Hub", function()
local Player = Players.LocalPlayer
local Kick = Player.Kick
Kick(Player,"HWID Incorrecto. Tu HWID esta enlazado con montes_1123. Sí crees que esto es un error contacta con Mιƈԋҽɾყ#8627")
wait(10)
game:Shutdown()
end)
